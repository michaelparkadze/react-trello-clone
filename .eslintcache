[{"/Users/michaelparkadze/Repos/react-trello-clone/src/index.js":"1","/Users/michaelparkadze/Repos/react-trello-clone/src/reportWebVitals.js":"2","/Users/michaelparkadze/Repos/react-trello-clone/src/App.js":"3","/Users/michaelparkadze/Repos/react-trello-clone/src/routes/index.jsx":"4","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Nav/index.jsx":"5","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Boards/index.jsx":"6","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Board/index.jsx":"7","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateList/index.jsx":"8","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/index.jsx":"9","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/ListHeader.jsx":"10","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Card/index.jsx":"11","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateCard/index.jsx":"12","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignIn/index.jsx":"13","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignUp/index.jsx":"14","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/index.js":"15","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/auth.js":"16","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/db.js":"17","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/user.js":"18","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/firebase.js":"19","/Users/michaelparkadze/Repos/react-trello-clone/src/utils/index.js":"20","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateBoardModal/index.jsx":"21","/Users/michaelparkadze/Repos/react-trello-clone/src/providers/UserProvider.js":"22","/Users/michaelparkadze/Repos/react-trello-clone/src/routes/PrivateRoute.js":"23","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateBoardCard/index.jsx":"24","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Loader/index.jsx":"25","/Users/michaelparkadze/Repos/react-trello-clone/src/components/BoardTitle/index.jsx":"26","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CardModal/index.jsx":"27","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Account/index.jsx":"28"},{"size":589,"mtime":1610893239183,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1610466546218,"results":"31","hashOfConfig":"30"},{"size":636,"mtime":1611245376233,"results":"32","hashOfConfig":"30"},{"size":867,"mtime":1611240563266,"results":"33","hashOfConfig":"30"},{"size":1812,"mtime":1611240748445,"results":"34","hashOfConfig":"30"},{"size":2302,"mtime":1611216830778,"results":"35","hashOfConfig":"30"},{"size":10455,"mtime":1611221726254,"results":"36","hashOfConfig":"30"},{"size":1179,"mtime":1611236845684,"results":"37","hashOfConfig":"30"},{"size":2854,"mtime":1611240262195,"results":"38","hashOfConfig":"30"},{"size":2323,"mtime":1611162480706,"results":"39","hashOfConfig":"30"},{"size":3937,"mtime":1611244550894,"results":"40","hashOfConfig":"30"},{"size":2050,"mtime":1611152129220,"results":"41","hashOfConfig":"30"},{"size":2473,"mtime":1610883996886,"results":"42","hashOfConfig":"30"},{"size":3329,"mtime":1610883985779,"results":"43","hashOfConfig":"30"},{"size":170,"mtime":1610880395641,"results":"44","hashOfConfig":"30"},{"size":498,"mtime":1610897379809,"results":"45","hashOfConfig":"30"},{"size":4503,"mtime":1611159734604,"results":"46","hashOfConfig":"30"},{"size":328,"mtime":1610896927161,"results":"47","hashOfConfig":"30"},{"size":662,"mtime":1610898780210,"results":"48","hashOfConfig":"30"},{"size":403,"mtime":1611240289533,"results":"49","hashOfConfig":"30"},{"size":1202,"mtime":1610949501278,"results":"50","hashOfConfig":"30"},{"size":462,"mtime":1610895210359,"results":"51","hashOfConfig":"30"},{"size":905,"mtime":1611156088687,"results":"52","hashOfConfig":"30"},{"size":232,"mtime":1611153775215,"results":"53","hashOfConfig":"30"},{"size":277,"mtime":1611155708421,"results":"54","hashOfConfig":"30"},{"size":2044,"mtime":1611240579271,"results":"55","hashOfConfig":"30"},{"size":3825,"mtime":1611240229172,"results":"56","hashOfConfig":"30"},{"size":2598,"mtime":1611244219903,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1aq6zp0",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/michaelparkadze/Repos/react-trello-clone/src/index.js",[],["126","127"],"/Users/michaelparkadze/Repos/react-trello-clone/src/reportWebVitals.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/App.js",["128"],"/Users/michaelparkadze/Repos/react-trello-clone/src/routes/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/Nav/index.jsx",["129"],"import { Link } from \"react-router-dom\";\nimport { auth } from \"../../firebase\";\nimport { Menu, Dropdown, Button, Space, Input } from \"antd\";\nimport {\n  HomeOutlined,\n  SettingOutlined,\n  UserOutlined,\n  LogoutOutlined,\n} from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\nexport default function Nav() {\n  const menu = (\n    <Menu>\n      <Menu.Item>\n        <Link to=\"/account\">\n          <UserOutlined />\n          Account\n        </Link>\n      </Menu.Item>\n      <Menu.Item onClick={auth.doSignOut}>\n        <LogoutOutlined />\n        Sign out\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <>\n      <nav className=\"nav\">\n        <div className=\"nav__home\">\n          <Link to=\"/boards\">\n            <Button\n              size=\"large\"\n              icon={\n                <HomeOutlined\n                  style={{\n                    color: \"rgba(60, 64, 82, 0.8)\",\n                    fontSize: \"1.25rem\",\n                  }}\n                />\n              }\n            />\n          </Link>\n        </div>\n        <div className=\"nav__settings\">\n          <Space direction=\"vertical\">\n            <Space wrap>\n              <Dropdown\n                overlay={menu}\n                trigger={[\"click\"]}\n                placement=\"bottomRight\"\n                style={{ backgroundColor: \"red\" }}\n              >\n                <Button\n                  size=\"large\"\n                  style={{ paddingTop: \"6px\" }}\n                  icon={\n                    <SettingOutlined\n                      style={{\n                        color: \"rgba(60, 64, 82, 0.8)\",\n                        fontSize: \"1.25rem\",\n                      }}\n                    />\n                  }\n                />\n              </Dropdown>\n            </Space>\n          </Space>\n        </div>\n      </nav>\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Boards/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/views/Board/index.jsx",["130"],"import { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { getBoardKey, mergeDataWithKey } from \"../../utils/index\";\nimport { useHistory } from \"react-router-dom\";\nimport { db } from \"../../firebase\";\nimport List from \"../../components/List\";\nimport CreateList from \"../../components/CreateList\";\nimport Loader from \"../../components/Loader\";\nimport BoardTitle from \"../../components/BoardTitle\";\nimport \"./styles.scss\";\n\nexport default function Board() {\n  const [lists, setLists] = useState([]);\n  const [cards, setCards] = useState([]);\n  const [board, setBoard] = useState([]);\n  const [boardKey, setBoardKey] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [dataFetched, setDataFetched] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    setLoading(true);\n    const boardKey = getBoardKey();\n    Promise.all([db.onceGetBoard(boardKey), db.onceGetLists(boardKey)])\n      .then((snapshots) => {\n        const board = snapshots[0].val();\n        const lists = mergeDataWithKey(snapshots[1].val());\n        setLists(lists.sort((a, b) => a.index - b.index));\n        setBoard(board);\n        setBoardKey(boardKey);\n        setLoading(false);\n        setDataFetched(true);\n      })\n      .catch((error) => {\n        setLoading(false);\n        setDataFetched(false);\n        console.error(error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (dataFetched) {\n      console.log(\"log one time\");\n      console.log(cards);\n    }\n  }, [dataFetched]);\n\n  const handleSetCards = (listCards) => {\n    setCards((prevState) => [...prevState, listCards]);\n  };\n\n  const handleCreateList = (listTitle) => {\n    db.doCreateList(boardKey, { title: listTitle }).then((res) => {\n      const copiedLists = [...lists];\n      const copiedCards = [...cards];\n      copiedCards.push({\n        listKey: res.key,\n        cards: [],\n      });\n      copiedLists.push(res);\n      console.log(res);\n      setLists(copiedLists);\n      setCards(copiedCards);\n    });\n  };\n\n  const handleCreateCard = (params) => {\n    const { listKey, cardTitle } = params;\n    db.doAddCard(listKey, cardTitle)\n      .then(() => db.onceGetCard(listKey))\n      .then((snapshot) => {\n        const snapshotVal = snapshot.val();\n        if (snapshotVal) {\n          // get back the cards\n          // and update the list\n          const newCards = mergeDataWithKey(snapshotVal);\n          const cardsClone = [...cards];\n          let cardsIndex = cardsClone.findIndex(\n            (cards) => cards.listKey === listKey\n          );\n\n          if (cardsIndex !== -1) {\n            cardsClone[cardsIndex] = {\n              ...cardsClone[cardsIndex],\n              cards: newCards,\n            };\n          } else {\n            cardsClone[cardsClone.length] = {\n              listKey: listKey,\n              cards: newCards,\n            };\n          }\n\n          console.log(cardsClone);\n          setCards(cardsClone);\n        }\n      });\n  };\n\n  const handleEditCard = (params) => {\n    const { listKey, cardKey, card } = params;\n\n    return db.doEditCard(listKey, cardKey, card).then(() => {\n      const updatedCards = [...cards];\n      // cards have listKey and all cards\n      // find the cards of list key and find card out of cards.cards\n      const listIndex = cards.findIndex((card) => card.listKey === listKey);\n      const cardIndex = cards[listIndex].cards.findIndex(\n        (card) => card.key === cardKey\n      );\n\n      updatedCards[listIndex].cards[cardIndex] = {\n        ...updatedCards[listIndex].cards[cardIndex],\n        ...card,\n      };\n      setCards(updatedCards);\n    });\n  };\n\n  const handleDeleteCard = (params) => {\n    const { listKey, cardKey } = params;\n\n    return db.doDeleteCard(listKey, cardKey).then(() => {\n      console.log(cards);\n      console.log(listKey);\n      console.log(cardKey);\n      const cardsClone = [...cards];\n\n      const listIndex = cardsClone.findIndex(\n        (card) => card.listKey === listKey\n      );\n      const updatedCards = cardsClone[listIndex].cards.filter(\n        (card) => card.key !== cardKey\n      );\n\n      setCards(updatedCards);\n    });\n  };\n\n  const handleUpdateList = (listKey, title) => {\n    return db.doUpdateList(boardKey, listKey, { title }).then((res) => {\n      const copiedLists = [...lists];\n      const listIndex = copiedLists.findIndex((list) => list.key === listKey);\n      copiedLists[listIndex] = { ...copiedLists[listIndex], title };\n\n      setLists(copiedLists);\n    });\n  };\n\n  const handleDeleteList = (listKey) => {\n    db.doDeleteList(boardKey, listKey).then(() => {\n      const copiedLists = [...lists];\n      const updatedLists = copiedLists.filter((list) => list.key !== listKey);\n      setLists(updatedLists);\n    });\n  };\n\n  const handleDeleteBoard = (boardKey) => {\n    return db.doDeleteBoard(boardKey).then(() => {\n      history.push(\"/boards\");\n    });\n  };\n\n  const handleUpdateBoard = (boardKey, title) => {\n    return db.doUpdateBoard(boardKey, title).then(() => {\n      const updatedBoard = { ...board, ...title };\n      setBoard(updatedBoard);\n    });\n  };\n\n  const handleOnDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result;\n\n    let droppableIdStart;\n    let droppableIdEnd;\n    let droppableIndexStart;\n    let droppableIndexEnd;\n\n    if (destination) {\n      droppableIdEnd = destination.droppableId;\n      droppableIndexEnd = destination.index;\n    }\n\n    if (source) {\n      droppableIdStart = source.droppableId;\n      droppableIndexStart = source.index;\n    }\n\n    if (!destination) {\n      return;\n    }\n\n    if (type === \"list\") {\n      const listsClone = [...lists];\n      const pulledOutList = listsClone.splice(droppableIndexStart, 1);\n      listsClone.splice(droppableIndexEnd, 0, ...pulledOutList);\n      setLists(listsClone);\n      db.onListMove({ boardKey, lists: listsClone });\n    }\n\n    // Card Key = draggable id\n    // old list key = source droppableId\n    // new list key = destination droppableId\n    if (type === \"card\") {\n      console.log(result);\n\n      // change ui, and send the data to movecard to update database\n      // change ui means doing forEach\n      if (droppableIdStart === droppableIdEnd) {\n        const cardsClone = [...cards];\n\n        let cardsIndex = cardsClone.findIndex(\n          (cards) => cards.listKey === droppableIdEnd\n        );\n\n        let listCards = cardsClone[cardsIndex].cards;\n        const card = listCards.splice(droppableIndexStart, 1);\n        listCards.splice(droppableIndexEnd, 0, ...card);\n\n        setCards(cardsClone);\n\n        db.doMoveCard({\n          cards: cardsClone[cardsIndex].cards,\n          newIndex: droppableIndexEnd,\n          oldListKey: droppableIdStart,\n          newListKey: droppableIdEnd,\n          cardKey: draggableId,\n        }).then((snapshot) => {\n          console.log(\"moving cards will work\");\n          console.log(mergeDataWithKey(snapshot.val()));\n        });\n        console.log(listCards);\n      }\n\n      if (droppableIdStart !== droppableIdEnd) {\n        const cardsClone = [...cards];\n\n        if (cards.length !== lists.length) {\n          const missingCards = lists.filter(\n            (list) => !cardsClone.some((card) => list.key === card.listKey)\n          );\n\n          missingCards.forEach((list) => {\n            cardsClone.push({\n              listKey: list.key,\n              cards: [],\n            });\n          });\n\n          setCards(cardsClone);\n        }\n\n        let startListIndex = cardsClone.findIndex(\n          (cards) => cards.listKey === droppableIdStart\n        );\n        let endListIndex = cardsClone.findIndex(\n          (cards) => cards.listKey === droppableIdEnd\n        );\n        let startList = cardsClone[startListIndex].cards;\n        let endList = cardsClone[endListIndex].cards;\n\n        const card = startList.splice(droppableIndexStart, 1);\n        endList.splice(droppableIndexEnd, 0, ...card);\n\n        setCards(cardsClone);\n        db.doMoveCard({\n          cards: cardsClone[endListIndex].cards,\n          newIndex: droppableIndexEnd,\n          oldListKey: droppableIdStart,\n          newListKey: droppableIdEnd,\n          cardKey: draggableId,\n        }).then((snapshot) => {\n          console.log(\"moving cards will work\");\n          console.log(mergeDataWithKey(snapshot.val()));\n        });\n      }\n    }\n  };\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <BoardTitle\n            title={board.title}\n            boardKey={boardKey}\n            updateBoard={handleUpdateBoard}\n            deleteBoard={handleDeleteBoard}\n          />\n          <DragDropContext onDragEnd={handleOnDragEnd}>\n            <div className=\"board-wrapper\">\n              <Droppable\n                droppableId=\"all-lists\"\n                direction=\"horizontal\"\n                type=\"list\"\n              >\n                {(provided) => (\n                  <div\n                    className=\"lists-container\"\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                  >\n                    {lists?.map((list, index) => {\n                      const listCards = cards.find(\n                        (cards) => cards.listKey === list.key\n                      );\n\n                      return (\n                        <>\n                          <List\n                            key={list.key}\n                            listKey={list.key}\n                            listTitle={list.title}\n                            cards={listCards}\n                            setCards={handleSetCards}\n                            handleCreateCard={handleCreateCard}\n                            handleEditCard={handleEditCard}\n                            handleDeleteCard={handleDeleteCard}\n                            setDataFetched={setDataFetched}\n                            index={index}\n                            title={list.title}\n                            handleUpdateList={handleUpdateList}\n                            handleDeleteList={handleDeleteList}\n                          />\n                        </>\n                      );\n                    })}\n\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n              <CreateList handleCreateList={handleCreateList} />\n            </div>\n          </DragDropContext>\n        </>\n      )}\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateList/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/index.jsx",["131"],"import { useState, useEffect } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { mergeDataWithKey } from \"../../utils\";\nimport { db } from \"../../firebase\";\nimport CreateCard from \"../CreateCard\";\nimport ListHeader from \"./ListHeader\";\nimport Card from \"../Card\";\nimport \"./styles.scss\";\n\nexport default function List(props) {\n  const [creatingCard, setCreatingCard] = useState(false);\n\n  const {\n    cards,\n    setCards,\n    listTitle,\n    listKey,\n    handleCreateCard,\n    handleEditCard,\n    handleDeleteCard,\n    handleUpdateList,\n    handleDeleteList,\n    index,\n  } = props;\n\n  useEffect(() => {\n    db.onceGetCard(listKey).then((snapshot) => {\n      const snapshotVal = snapshot.val();\n      if (snapshotVal) {\n        const data = {\n          listKey,\n          cards: mergeDataWithKey(snapshotVal).sort(\n            (a, b) => a.index - b.index\n          ),\n        };\n        setCards(data);\n      }\n    });\n  }, []);\n\n  const handleCreatingCard = () => {\n    setCreatingCard(!creatingCard);\n  };\n\n  return (\n    <Draggable key={listKey} draggableId={String(listKey)} index={index}>\n      {(provided) => (\n        <div\n          className=\"list-container\"\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <ListHeader\n            title={listTitle}\n            listKey={listKey}\n            handleUpdateList={handleUpdateList}\n            handleDeleteList={handleDeleteList}\n          />\n          <div className=\"list-container__content\">\n            <div className=\"list-container__content__cards\">\n              <Droppable droppableId={String(listKey)} type=\"card\">\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    {cards &&\n                      cards.cards?.map((card, index) => (\n                        <Card\n                          key={card.key}\n                          index={index}\n                          cardKey={card.key}\n                          title={card.title}\n                          description={card.description ? card.description : \"\"}\n                          listKey={listKey}\n                          handleEditCard={handleEditCard}\n                          handleDeleteCard={handleDeleteCard}\n                        />\n                      ))}\n                    {provided.placeholder}\n                    <CreateCard\n                      listKey={listKey}\n                      creatingCard={creatingCard}\n                      handleCreatingCard={handleCreatingCard}\n                      handleCreateCard={handleCreateCard}\n                    />\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/ListHeader.jsx",["132"],"import { useState, useEffect } from \"react\";\nimport { Menu, Dropdown, Button, Space, Input } from \"antd\";\nimport { MoreOutlined } from \"@ant-design/icons\";\n\nexport default function ListHeader(props) {\n  const [listHeader, setListHeader] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n\n  const { title, listKey, handleUpdateList, handleDeleteList } = props;\n\n  useEffect(() => {\n    setListHeader(title);\n  }, []);\n\n  const handleInputChange = (e) => {\n    e.preventDefault();\n    setListHeader(e.target.value);\n  };\n\n  const handleEnableEdit = () => {\n    setEditing(true);\n    setListHeader(title);\n  };\n\n  const handleFormSubmit = (event, callback, listKey, listTitle) => {\n    event.preventDefault();\n\n    if (listHeader !== \"\") {\n      callback(listKey, listTitle).then(() => {\n        setListHeader(\"\");\n        setEditing(false);\n      });\n    }\n  };\n\n  const menu = (\n    <Menu>\n      <Menu.Item onClick={() => handleDeleteList(listKey)}>\n        Delete this list\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <div className=\"list-container__content__header\">\n      {editing ? (\n        <form\n          onSubmit={(event) =>\n            handleFormSubmit(event, handleUpdateList, listKey, listHeader)\n          }\n          onBlur={(event) =>\n            handleFormSubmit(event, handleUpdateList, listKey, listHeader)\n          }\n        >\n          <Input\n            type=\"text\"\n            value={listHeader}\n            onChange={(e) => handleInputChange(e)}\n            autoFocus\n          />\n        </form>\n      ) : (\n        <>\n          <div onClick={() => handleEnableEdit()} style={{ cursor: \"pointer\" }}>\n            {title}\n          </div>\n        </>\n      )}\n      <Space direction=\"vertical\">\n        <Space wrap>\n          <Dropdown\n            overlay={menu}\n            trigger={[\"click\"]}\n            placement=\"bottomRight\"\n            style={{ backgroundColor: \"red\" }}\n          >\n            <Button\n              shape=\"circle\"\n              style={{ border: \"none\", boxShadow: \"none\" }}\n              icon={\n                <MoreOutlined\n                  style={{ transform: \"rotate(90deg)\", fontSize: 22 }}\n                />\n              }\n              className=\"list-menu\"\n            />\n          </Dropdown>\n        </Space>\n      </Space>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Card/index.jsx",["133"],"import { useState, useEffect } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Button, Input } from \"antd\";\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport CardModal from \"../CardModal\";\nimport \"./styles.scss\";\n\nexport default function Card(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [showIcons, setShowIcons] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const [cardTitle, setCardTitle] = useState(\"\");\n\n  const {\n    index,\n    title,\n    description,\n    cardKey,\n    listKey,\n    handleEditCard,\n    handleDeleteCard,\n  } = props;\n\n  useEffect(() => {\n    setCardTitle(title);\n    console.log(props);\n  }, []);\n\n  const handleTitleChange = (e) => {\n    setCardTitle(e.target.value);\n  };\n\n  const handleShowIcons = () => {\n    setShowIcons(true);\n  };\n\n  const handleHideIcons = () => {\n    setShowIcons(false);\n  };\n\n  const handleEnableEditing = () => {\n    setEditing(true);\n  };\n\n  const handleDisableEditing = () => {\n    setEditing(false);\n  };\n\n  const handleShowModal = () => {\n    setShowModal(true);\n  };\n\n  const handleHideModal = () => {\n    setShowModal(false);\n  };\n\n  const handleSubmitForm = (event, callback, listKey, cardKey, title) => {\n    event.preventDefault();\n\n    const card = { title: cardTitle };\n    callback({ listKey, cardKey, card }).then(() => setEditing(false));\n  };\n\n  const onDeleteCard = (callback, listKey, cardKey) => {\n    callback({ listKey, cardKey });\n  };\n\n  return (\n    <>\n      <Draggable draggableId={String(cardKey)} index={index}>\n        {(provided) => (\n          <>\n            <div\n              className=\"card-container\"\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              ref={provided.innerRef}\n              onMouseEnter={handleShowIcons}\n              onMouseLeave={handleHideIcons}\n              onBlur={handleDisableEditing}\n            >\n              <div className=\"card-container__content\">\n                {editing ? (\n                  <form\n                    onSubmit={(event) =>\n                      handleSubmitForm(\n                        event,\n                        handleEditCard,\n                        listKey,\n                        cardKey,\n                        title\n                      )\n                    }\n                  >\n                    <Input\n                      value={cardTitle}\n                      onChange={(event) => handleTitleChange(event)}\n                      autoFocus\n                    />\n                  </form>\n                ) : (\n                  <div onClick={() => handleShowModal()}>\n                    {showIcons && (\n                      <div\n                        className=\"card-icons\"\n                        onClick={(event) => event.stopPropagation()}\n                      >\n                        <Button\n                          onClick={handleEnableEditing}\n                          icon={<EditOutlined />}\n                          style={{ fontSize: 8, border: \"none\" }}\n                        ></Button>\n                        <Button\n                          onClick={() =>\n                            onDeleteCard(handleDeleteCard, listKey, cardKey)\n                          }\n                          icon={<DeleteOutlined />}\n                          style={{ fontSize: 8, border: \"none\" }}\n                        ></Button>\n                      </div>\n                    )}\n                    <div>{title}</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </>\n        )}\n      </Draggable>\n      <CardModal\n        visible={showModal}\n        cardTitle={cardTitle}\n        cardDescription={description}\n        cardKey={cardKey}\n        listKey={listKey}\n        handleEditCard={handleEditCard}\n        handleHideModal={handleHideModal}\n      />\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateCard/index.jsx",["134"],"import { useState } from \"react\";\nimport { Button, Input } from \"antd\";\nimport \"./styles.scss\";\n\nexport default function CreateCard(props) {\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const { listKey, handleCreateCard, creatingCard, handleCreatingCard } = props;\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n    if (cardTitle !== \"\") {\n      handleCreateCard({ cardTitle, listKey });\n      setCardTitle(\"\");\n      handleCreatingCard(false);\n    }\n  };\n\n  const { TextArea } = Input;\n\n  return (\n    <div className=\"create-card\">\n      {creatingCard ? (\n        <div className=\"create-card-form-container\">\n          <TextArea\n            value={cardTitle}\n            placeholder=\"Enter the title for this card...\"\n            onSubmit={(event) => handleOnSubmit(event)}\n            // onBlur={() => {\n            //   setCardTitle(\"\");\n            //   handleCreatingCard(false);\n            // }}\n            rows={2}\n            onChange={(e) => setCardTitle(e.target.value)}\n            autoFocus\n          />\n          <Button\n            type=\"primary\"\n            style={{\n              borderRadius: \"12px\",\n              fontWeight: 500,\n              border: \"rgb(60, 64, 82)\",\n              backgroundImage: \"linear-gradient(45deg, #606c88, #3f4c6b)\",\n              marginRight: \"8px\",\n            }}\n            onClick={(event) => handleOnSubmit(event)}\n            // disabled={cardTitle === \"\"}\n          >\n            Create\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"circle\"\n            style={{\n              fontWeight: 500,\n              color: \"#3f4c6b\",\n              backgroundColor: \"#fff\",\n              boxShadow: \"none\",\n              border: \"1px solid #3f4c6b\",\n            }}\n            onClick={() => {\n              setCardTitle(\"\");\n              handleCreatingCard(false);\n            }}\n          >\n            X\n          </Button>\n        </div>\n      ) : (\n        <a onClick={handleCreatingCard}>+ Add Card</a>\n      )}\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignIn/index.jsx",["135"],"import { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { Form, Input, Button, Checkbox } from \"antd\";\nimport \"./styles.scss\";\nimport { MailOutlined, LockOutlined } from \"@ant-design/icons\";\n\nexport default function SignIn() {\n  const history = useHistory();\n  const [userDetails, setUserDetails] = useState({\n    email: \"\",\n    password: \"\",\n    error: null,\n  });\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n\n    const { email, password } = userDetails;\n\n    return auth\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => history.push(\"/boards\"))\n      .catch((error) =>\n        setUserDetails((prevState) => ({ ...prevState, error: error.message }))\n      );\n  };\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    setUserDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return (\n    <div className=\"sign-in-container\">\n      <Form>\n        <h1>Sign in</h1>\n        <Form.Item\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email address\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<MailOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<LockOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" block onClick={(e) => handleOnSubmit(e)}>\n            Sign in\n          </Button>\n        </Form.Item>\n        {userDetails.error && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>\n            {userDetails.error}\n          </div>\n        )}\n        <Form.Item>\n          <div style={{ marginBottom: \"12px\" }}>\n            <Link to=\"/forgot-password\">Forgot your password?</Link>\n          </div>\n          Don't have an account? <Link to=\"/sign-up\">Sign up</Link>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignUp/index.jsx",["136","137"],"import { useState } from \"react\";\nimport { auth, db } from \"../../firebase\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { Form, Input, Button, Checkbox, Icon } from \"antd\";\nimport { UserOutlined, LockOutlined, MailOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\nexport default function SignUp() {\n  const history = useHistory();\n  const [userDetails, setUserDetails] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    error: null,\n  });\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n\n    const { fullName, email, password } = userDetails;\n\n    return auth\n      .doCreateUserWithEmailAndPassword(email, password, fullName)\n      .then((authUser) => {\n        db.doCreateUser(authUser.user.uid, fullName, email);\n        history.push(\"/boards\");\n      })\n      .catch((error) =>\n        setUserDetails((prevState) => ({ ...prevState, error: error.message }))\n      );\n  };\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    setUserDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return (\n    <div className=\"sign-up-container\">\n      <Form>\n        <h1>Sign up</h1>\n\n        <Form.Item\n          name=\"fullName\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input\n            type=\"text\"\n            name=\"fullName\"\n            placeholder=\"Enter your full name\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<UserOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Enter your email address\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<MailOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter a password\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<LockOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"confirmPassword\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            name=\"confirmPassword\"\n            type=\"password\"\n            placeholder=\"Confirm password\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<LockOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" block onClick={(e) => handleOnSubmit(e)}>\n            Sign up\n          </Button>\n        </Form.Item>\n        {userDetails.error && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>\n            {userDetails.error}\n          </div>\n        )}\n        <Form.Item>\n          Already have an account? <Link to=\"/sign-in\">Sign in</Link>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/index.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/auth.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/db.js",["138","139"],"import { db } from \"./firebase\";\nimport { getUser } from \"./user\";\n\nconst boardsRef = db.ref(\"boards\");\nconst listsRef = db.ref(\"lists\");\nconst cardsRef = db.ref(\"cards\");\n\nexport const doCreateUser = (id, username, email) =>\n  db.ref(`users/${id}`).set({\n    username,\n    email,\n  });\n\nexport const onceGetUsers = () => db.ref(\"users\").once(\"value\");\n\nexport const doCreateBoard = async (board) => {\n  const uid = getUser().uid;\n  const id = boardsRef.push().key;\n  await boardsRef.child(uid).child(id).set(board);\n  board.key = id;\n  return board;\n};\n\nexport const doDeleteBoard = async (boardKey) => {\n  const uid = getUser().uid;\n  await boardsRef.child(uid).child(boardKey).remove();\n};\n\nexport const doUpdateBoard = async (boardKey, title) => {\n  const uid = getUser().uid;\n  await boardsRef\n    .child(uid)\n    .child(boardKey)\n    .update({\n      ...title,\n    });\n};\n\nexport const onceGetBoards = () => {\n  const uid = getUser().uid;\n  return boardsRef.child(uid).once(\"value\");\n};\n\nexport const doEditBoard = async (boardKey, board) => {\n  const uid = getUser().uid;\n\n  await boardsRef\n    .child(uid)\n    .child(boardKey)\n    .update({\n      ...board,\n    });\n  return board;\n};\n\nexport const onceGetBoard = (boardKey) => {\n  const uid = getUser().uid;\n\n  return boardsRef.child(uid).child(`${boardKey}`).once(\"value\");\n};\n\nexport const onListMove = async (params) => {\n  const { boardKey, lists } = params;\n  console.log(lists);\n  var updates = {};\n\n  lists.forEach((list, index) => {\n    console.log(listsRef);\n    const newList = { ...list, index };\n    updates[list.key] = newList;\n  });\n\n  listsRef.child(boardKey).update(updates);\n};\n\nexport const onceGetLists = (key) => listsRef.child(key).once(\"value\");\n\nexport const doCreateList = async (boardKey, list) => {\n  let listIndex;\n  // Get amount of lists to determine new list index\n  listsRef\n    .child(boardKey)\n    .once(\"value\")\n    .then((snapshot) => {\n      const listsObject = snapshot.val();\n      listIndex = Object.keys(listsObject).length;\n    });\n\n  const id = listsRef.push().key;\n  await listsRef.child(boardKey).child(id).set(list);\n  list.key = id;\n  list.index = listIndex - 1;\n  return list;\n};\n\nexport const doDeleteList = (boardKey, listKey) =>\n  db\n    .ref(`lists/${boardKey}`)\n    .child(`${listKey}`)\n    .remove()\n    .then(() => db.ref(\"cards/\").child(`${listKey}`).remove());\n\nexport const doUpdateList = async (boardKey, listKey, list) => {\n  await listsRef\n    .child(boardKey)\n    .child(listKey)\n    .update({\n      ...list,\n    });\n  return list;\n};\n\nexport const doAddCard = async (listKey, cardTitle) => {\n  let cardIndex;\n  // Get amount of lists to determine new list index\n  await db\n    .ref(`cards/${listKey}`)\n    .once(\"value\")\n    .then((snapshot) => {\n      const cardsObject = snapshot.val();\n      if (cardsObject !== undefined && cardsObject !== null) {\n        cardIndex = Object.keys(cardsObject).length;\n      } else cardIndex = 0;\n    });\n\n  db.ref(`cards/${listKey}`).push({\n    title: cardTitle,\n    index: cardIndex,\n  });\n};\n\nexport const onceGetCard = (listKey) =>\n  db.ref(`cards/${listKey}`).once(\"value\");\n\nexport const doEditCard = async (listKey, cardKey, card) => {\n  await cardsRef\n    .child(listKey)\n    .child(cardKey)\n    .update({\n      ...card,\n    });\n  card.key = cardKey;\n  return card;\n};\n\nexport const doMoveCard = async (params) => {\n  const { oldListKey, newListKey, cardKey, newIndex, cards } = params;\n\n  // we copy the card details\n  // we remove it from the old list\n  // and we insert it in the new list\n\n  // If its same list\n  // Change\n\n  let card;\n  await db\n    .ref(`cards/${oldListKey}`)\n    .child(`${cardKey}`)\n    .once(\"value\")\n    .then((snapshot) => {\n      card = snapshot.val();\n    });\n\n  var updates = {};\n\n  cards.forEach((card, index) => {\n    const newCard = { ...card, index };\n    updates[card.key] = newCard;\n  });\n\n  db.ref(`cards/${oldListKey}`)\n    .child(`${cardKey}`)\n    .remove()\n    .then(() => {\n      // remove the card from old list\n      // and update all cards on new list\n\n      db.ref(`cards/${newListKey}`).update(updates);\n      // console.log(\"editing \");\n    });\n\n  return onceGetCard(newListKey);\n\n  // db.ref(`cards/${oldListKey}`)\n  //   .child(`${cardKey}`)\n  //   .remove()\n  //   .then(() =>\n  //     db.ref(`cards/${newListKey}/${cardKey}`).set({\n  //       ...card,\n  //     })\n  //   );\n};\n\nexport const doDeleteCard = (listKey, cardKey) =>\n  db.ref(`cards/${listKey}/`).child(`${cardKey}`).remove();\n","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/user.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/firebase.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/utils/index.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateBoardModal/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/providers/UserProvider.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/routes/PrivateRoute.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateBoardCard/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/Loader/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/BoardTitle/index.jsx",["140"],"import { useState, useEffect } from \"react\";\nimport { Button, Menu, Dropdown, Input } from \"antd\";\nimport \"./styles.scss\";\n\nexport default function BoardTitle(props) {\n  const [boardTitle, setBoardTitle] = useState(\"\");\n  const [editing, setEditing] = useState(false);\n\n  useEffect(() => {\n    setBoardTitle(title);\n  }, []);\n\n  const handleInputChange = (e) => {\n    e.preventDefault();\n    setBoardTitle(e.target.value);\n  };\n\n  const handleEnableEdit = () => {\n    setEditing(true);\n    setBoardTitle(title);\n  };\n\n  const handleDisableEdit = () => {\n    setEditing(false);\n    setBoardTitle(\"\");\n  };\n\n  const handleFormSubmit = (event, callback, boardKey, boardTitle) => {\n    event.preventDefault();\n\n    if (boardTitle !== \"\") {\n      callback(boardKey, { title: boardTitle }).then(() => {\n        setBoardTitle(\"\");\n        setEditing(false);\n      });\n    }\n  };\n\n  const { title, boardKey, updateBoard, deleteBoard } = props;\n  return (\n    <div className=\"board-topbar\">\n      <div className=\"left\">\n        {editing ? (\n          <form\n            onSubmit={(event) => {\n              handleFormSubmit(event, updateBoard, boardKey, boardTitle);\n            }}\n            onBlur={handleDisableEdit}\n          >\n            <Input\n              value={boardTitle}\n              onChange={handleInputChange}\n              autoFocus\n              style={{\n                maxWidth: \"200px\",\n                fontSize: \"1.125rem\",\n                fontWeight: 500,\n              }}\n            />\n          </form>\n        ) : (\n          <Button onClick={handleEnableEdit} className=\"board-title\">\n            {title}\n          </Button>\n        )}\n      </div>\n      <div className=\"right\">\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item key=\"0\" onClick={() => deleteBoard(boardKey)}>\n                Delete board\n              </Menu.Item>\n            </Menu>\n          }\n          trigger={[\"click\"]}\n        >\n          <Button>Show Menu</Button>\n        </Dropdown>\n      </div>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CardModal/index.jsx",["141","142"],"import { useState, useEffect } from \"react\";\nimport { Button, Modal, Input } from \"antd\";\nimport {\n  TagOutlined,\n  ProjectOutlined,\n  AlignLeftOutlined,\n} from \"@ant-design/icons\";\n\nconst { TextArea } = Input;\n\nexport default function CardModal(props) {\n  const [editing, setEditing] = useState(false);\n  const [description, setDescription] = useState(\"\");\n  const {\n    visible,\n    cardTitle,\n    handleHideModal,\n    cardDescription,\n    handleEditCard,\n    cardKey,\n    listKey,\n  } = props;\n\n  useEffect(() => {\n    setDescription(cardDescription);\n  }, []);\n\n  const handleEnableEditing = () => {\n    setEditing(true);\n  };\n\n  const handleDisableEditing = () => {\n    setEditing(false);\n    setDescription(\"\");\n  };\n\n  const handleInputChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const handleSubmitForm = (event, callback, listKey, cardKey) => {\n    event.preventDefault();\n\n    const updatedCard = {\n      title: cardTitle,\n      description: description ? description : \"\",\n    };\n    callback({ listKey, cardKey, card: updatedCard }).then(() => {\n      handleDisableEditing();\n    });\n  };\n  return (\n    <Modal\n      title={\n        <div>\n          <h4 style={{ margin: 0 }}>\n            <ProjectOutlined style={{ marginRight: \"8px\" }} />\n            <span>{cardTitle}</span>\n          </h4>\n        </div>\n      }\n      visible={visible}\n      onCancel={() => {\n        handleHideModal();\n        handleDisableEditing();\n      }}\n      footer={null}\n    >\n      <div className=\"labels-container\" style={{ marginBottom: \"24px\" }}>\n        <h4>\n          <TagOutlined style={{ marginRight: \"8px\" }} />\n          <span>Labels</span>\n        </h4>\n        <div className=\"labels-selection\">\n          <Button type=\"primary\" style={{ marginRight: \"4px\" }}>\n            Low\n          </Button>\n          <Button\n            type=\"primary\"\n            style={{\n              marginRight: \"4px\",\n              backgroundColor: \"#ebc36a\",\n              borderColor: \"#ebc36a\",\n            }}\n          >\n            Medium\n          </Button>\n          <Button\n            type=\"primary\"\n            style={{ marginRight: \"4px\" }}\n            style={{\n              marginRight: \"4px\",\n              backgroundColor: \"#c74235\",\n              borderColor: \"#c74235\",\n            }}\n          >\n            High\n          </Button>\n        </div>\n      </div>\n      <div className=\"description-container\">\n        <h4>\n          <AlignLeftOutlined style={{ marginRight: \"8px\" }} />{\" \"}\n          <span>Description</span>\n        </h4>\n        <div className=\"description-content\">\n          {editing ? (\n            <>\n              <form\n                onSubmit={(event) =>\n                  handleSubmitForm(event, handleEditCard, listKey, cardKey)\n                }\n              >\n                <TextArea\n                  value={description}\n                  onChange={(e) => handleInputChange(e)}\n                  placeholder={\n                    description === \"\"\n                      ? \"Add a more detailed description...\"\n                      : description\n                  }\n                  autoFocus\n                />\n                <Button\n                  onClick={(event) =>\n                    handleSubmitForm(event, handleEditCard, listKey, cardKey)\n                  }\n                >\n                  Save\n                </Button>\n                <Button onClick={handleDisableEditing}>Cancel</Button>\n              </form>\n            </>\n          ) : (\n            <div onClick={handleEnableEditing}>\n              {cardDescription ? (\n                <span>{cardDescription}</span>\n              ) : (\n                <span>Add a more detailed description...</span>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Account/index.jsx",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":21,"column":54,"nodeType":"149","endLine":21,"endColumn":69},{"ruleId":"150","severity":1,"message":"151","line":3,"column":41,"nodeType":"152","messageId":"153","endLine":3,"endColumn":46},{"ruleId":"154","severity":1,"message":"155","line":46,"column":6,"nodeType":"156","endLine":46,"endColumn":19,"suggestions":"157"},{"ruleId":"154","severity":1,"message":"158","line":39,"column":6,"nodeType":"156","endLine":39,"endColumn":8,"suggestions":"159"},{"ruleId":"154","severity":1,"message":"160","line":13,"column":6,"nodeType":"156","endLine":13,"endColumn":8,"suggestions":"161"},{"ruleId":"154","severity":1,"message":"162","line":27,"column":6,"nodeType":"156","endLine":27,"endColumn":8,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":69,"column":9,"nodeType":"166","endLine":69,"endColumn":41},{"ruleId":"150","severity":1,"message":"167","line":4,"column":31,"nodeType":"152","messageId":"153","endLine":4,"endColumn":39},{"ruleId":"150","severity":1,"message":"167","line":4,"column":31,"nodeType":"152","messageId":"153","endLine":4,"endColumn":39},{"ruleId":"150","severity":1,"message":"168","line":4,"column":41,"nodeType":"152","messageId":"153","endLine":4,"endColumn":45},{"ruleId":"150","severity":1,"message":"169","line":147,"column":44,"nodeType":"152","messageId":"153","endLine":147,"endColumn":52},{"ruleId":"150","severity":1,"message":"170","line":162,"column":7,"nodeType":"152","messageId":"153","endLine":162,"endColumn":11},{"ruleId":"154","severity":1,"message":"160","line":11,"column":6,"nodeType":"156","endLine":11,"endColumn":8,"suggestions":"171"},{"ruleId":"154","severity":1,"message":"172","line":26,"column":6,"nodeType":"156","endLine":26,"endColumn":8,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":91,"column":13,"nodeType":"149","endLine":95,"endColumn":15},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cards'. Either include it or remove the dependency array.","ArrayExpression",["178"],"React Hook useEffect has missing dependencies: 'listKey' and 'setCards'. Either include them or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'props' and 'title'. Either include them or remove the dependency array.",["181"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Checkbox' is defined but never used.","'Icon' is defined but never used.","'newIndex' is assigned a value but never used.","'card' is assigned a value but never used.",["182"],"React Hook useEffect has a missing dependency: 'cardDescription'. Either include it or remove the dependency array.",["183"],"react/jsx-no-duplicate-props","No duplicate props allowed","no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"188","fix":"192"},{"desc":"193","fix":"194"},"Update the dependencies array to be: [cards, dataFetched]",{"range":"195","text":"196"},"Update the dependencies array to be: [listKey, setCards]",{"range":"197","text":"198"},"Update the dependencies array to be: [title]",{"range":"199","text":"200"},"Update the dependencies array to be: [props, title]",{"range":"201","text":"202"},{"range":"203","text":"200"},"Update the dependencies array to be: [cardDescription]",{"range":"204","text":"205"},[1542,1555],"[cards, dataFetched]",[956,958],"[listKey, setCards]",[427,429],"[title]",[710,712],"[props, title]",[321,323],[560,562],"[cardDescription]"]