[{"/Users/michaelparkadze/Repos/react-trello-clone/src/index.js":"1","/Users/michaelparkadze/Repos/react-trello-clone/src/reportWebVitals.js":"2","/Users/michaelparkadze/Repos/react-trello-clone/src/App.js":"3","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/store.js":"4","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/rootReducer.js":"5","/Users/michaelparkadze/Repos/react-trello-clone/src/routes/index.jsx":"6","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/listReducer.js":"7","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/boardReducer.js":"8","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/cardReducer.js":"9","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Nav/index.jsx":"10","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/constants.js":"11","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Boards/index.jsx":"12","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Board/index.jsx":"13","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/boardActions.js":"14","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/cardActions.js":"15","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/listActions.js":"16","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateList/index.jsx":"17","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/index.jsx":"18","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/ListHeader.jsx":"19","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Card/index.jsx":"20","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateCard/index.jsx":"21","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignIn/index.jsx":"22","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignUp/index.jsx":"23","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/index.js":"24","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/auth.js":"25","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/db.js":"26","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/user.js":"27","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/firebase.js":"28","/Users/michaelparkadze/Repos/react-trello-clone/src/utils/index.js":"29","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateBoardModal/index.jsx":"30","/Users/michaelparkadze/Repos/react-trello-clone/src/providers/UserProvider.js":"31","/Users/michaelparkadze/Repos/react-trello-clone/src/routes/PrivateRoute.js":"32"},{"size":589,"mtime":1610893239183,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1610466546218,"results":"35","hashOfConfig":"34"},{"size":218,"mtime":1610994160834,"results":"36","hashOfConfig":"34"},{"size":297,"mtime":1610466546218,"results":"37","hashOfConfig":"34"},{"size":322,"mtime":1610466546217,"results":"38","hashOfConfig":"34"},{"size":894,"mtime":1610994269116,"results":"39","hashOfConfig":"34"},{"size":3035,"mtime":1610470013762,"results":"40","hashOfConfig":"34"},{"size":2034,"mtime":1610470685038,"results":"41","hashOfConfig":"34"},{"size":856,"mtime":1610466546217,"results":"42","hashOfConfig":"34"},{"size":412,"mtime":1611049765454,"results":"43","hashOfConfig":"34"},{"size":438,"mtime":1610466546217,"results":"44","hashOfConfig":"34"},{"size":3539,"mtime":1610949323557,"results":"45","hashOfConfig":"34"},{"size":8886,"mtime":1611065697847,"results":"46","hashOfConfig":"34"},{"size":336,"mtime":1610466546216,"results":"47","hashOfConfig":"34"},{"size":533,"mtime":1610466546216,"results":"48","hashOfConfig":"34"},{"size":1532,"mtime":1610466546217,"results":"49","hashOfConfig":"34"},{"size":273,"mtime":1611057997991,"results":"50","hashOfConfig":"34"},{"size":2611,"mtime":1611065093384,"results":"51","hashOfConfig":"34"},{"size":2269,"mtime":1611151671840,"results":"52","hashOfConfig":"34"},{"size":710,"mtime":1611059091614,"results":"53","hashOfConfig":"34"},{"size":2050,"mtime":1611152129220,"results":"54","hashOfConfig":"34"},{"size":2473,"mtime":1610883996886,"results":"55","hashOfConfig":"34"},{"size":3329,"mtime":1610883985779,"results":"56","hashOfConfig":"34"},{"size":170,"mtime":1610880395641,"results":"57","hashOfConfig":"34"},{"size":498,"mtime":1610897379809,"results":"58","hashOfConfig":"34"},{"size":4498,"mtime":1611059031294,"results":"59","hashOfConfig":"34"},{"size":328,"mtime":1610896927161,"results":"60","hashOfConfig":"34"},{"size":662,"mtime":1610898780210,"results":"61","hashOfConfig":"34"},{"size":612,"mtime":1610884346871,"results":"62","hashOfConfig":"34"},{"size":1202,"mtime":1610949501278,"results":"63","hashOfConfig":"34"},{"size":462,"mtime":1610895210359,"results":"64","hashOfConfig":"34"},{"size":864,"mtime":1610896234222,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1aq6zp0",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"75"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"75"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"/Users/michaelparkadze/Repos/react-trello-clone/src/index.js",[],["143","144"],"/Users/michaelparkadze/Repos/react-trello-clone/src/reportWebVitals.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/App.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/store.js",[],["145","146"],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/rootReducer.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/routes/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/listReducer.js",["147"],"import {\n  ADD_LIST,\n  DELETE_LIST,\n  DRAG_HAPPENED,\n  CREATE_CARD,\n  EDIT_LIST_TITLE,\n} from \"../constants\";\n\nconst initialState = {\n  lists: [\n    {\n      id: \"list-0\",\n      cards: [\"card-0\"],\n      title: \"myList\",\n      board: \"board-0\",\n    },\n  ],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case EDIT_LIST_TITLE: {\n      const { listId, newTitle, boardId } = action.payload;\n\n      const listsClone = [...state.lists];\n      const list = listsClone.find(\n        (item) => item.id === listId && item.board === boardId\n      );\n      list.title = newTitle;\n\n      return {\n        ...state,\n        lists: listsClone,\n      };\n    }\n    case ADD_LIST: {\n      const { title, id, boardId } = action.payload;\n\n      const newList = {\n        title: title,\n        id: `list-${id}`,\n        cards: [],\n        board: boardId,\n      };\n\n      const listsClone = [...state.lists];\n      listsClone.push(newList);\n\n      const newState = { ...state, lists: listsClone };\n\n      return newState;\n    }\n\n    case CREATE_CARD: {\n      const { listId, id } = action.payload;\n      const listsClone = [...state.lists];\n      const list = listsClone.find((item) => item.id === listId);\n      list.cards.push(`card-${id}`);\n\n      return { ...state, lists: listsClone };\n    }\n\n    case DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexEnd,\n        droppableIndexStart,\n        type,\n      } = action.payload;\n\n      // draggin lists around - the listOrderReducer should handle this\n      if (type === \"list\") {\n        return state;\n      }\n\n      // in the same list\n      if (droppableIdStart === droppableIdEnd) {\n        const listsClone = [...state.lists];\n        const list = listsClone.find((item) => item.id === droppableIdStart);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n        console.log(action.payload);\n\n        return { ...state, lists: listsClone };\n      }\n\n      // other list\n      if (droppableIdStart !== droppableIdEnd) {\n        const listsClone = [...state.lists];\n        // find the list where the drag happened\n        const listStart = listsClone.find(\n          (item) => item.id === droppableIdStart\n        );\n        // pull out the card from this list\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        // find the list where the drag ended\n        const listEnd = listsClone.find((item) => item.id === droppableIdEnd);\n\n        // put the card in the new list\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        return {\n          ...state,\n          lists: listsClone,\n        };\n      }\n      return state;\n\n    case DELETE_LIST: {\n      const { listId } = action.payload;\n      const listsClone = [...state.lists];\n      listsClone.filter((item) => item.id !== listId);\n\n      return {\n        ...state,\n        lists: listsClone,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/boardReducer.js",["148","149"],"import {\n  CREATE_BOARD,\n  SET_ACTIVE_BOARD,\n  DRAG_HAPPENED,\n  ADD_LIST,\n  DELETE_BOARD,\n  DELETE_LIST,\n} from \"../constants\";\n\nconst initialState = {\n  boards: [\n    {\n      id: \"board-0\",\n      lists: [\"list-0\"],\n      title: \"myboard\",\n    },\n  ],\n  activeBoard: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_LIST: {\n      const { boardId, id } = action.payload;\n\n      // const board = state[boardId];\n      const boardsClone = [...state.boards];\n      const board = boardsClone.find((item) => item.id === boardId);\n      const newListId = `list-${id}`;\n      const newLists = [...board.lists, newListId];\n      board.lists = newLists;\n      return { ...state, boards: boardsClone };\n    }\n\n    case DRAG_HAPPENED: {\n      const { boardId } = action.payload;\n      const board = state.boards.find((board) => board.id === boardId);\n      const lists = board.lists;\n      const { droppableIndexEnd, droppableIndexStart, type } = action.payload;\n\n      // draggin lists around\n      if (type === \"list\") {\n        const pulledOutList = lists.splice(droppableIndexStart, 1);\n        lists.splice(droppableIndexEnd, 0, ...pulledOutList);\n        board.lists = lists;\n\n        return { ...state, [boardId]: board };\n      }\n      return state;\n    }\n    case DELETE_LIST: {\n      const { listId, boardId } = action.payload;\n      const board = state[boardId];\n      const lists = board.lists;\n      const newLists = lists.filter((id) => id !== listId);\n      board.lists = newLists;\n      return { ...state, [boardId]: board };\n    }\n\n    case CREATE_BOARD: {\n      const { title, id } = action.payload;\n\n      const boardsCopy = [...state.boards];\n      const newBoard = {\n        id: id,\n        title: title,\n        lists: [],\n      };\n      boardsCopy.push(newBoard);\n\n      return { ...state, boards: boardsCopy };\n    }\n\n    case SET_ACTIVE_BOARD: {\n      return {\n        ...state,\n        activeBoard: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/cardReducer.js",["150"],"import { CREATE_CARD, DELETE_CARD, EDIT_CARD } from \"../constants\";\n\nconst initialState = {\n  \"card-0\": {\n    title: \"Last Episode\",\n    id: `card-0`,\n    list: \"list-0\",\n  },\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CARD: {\n      const { title, listId, id } = action.payload;\n\n      const newCard = {\n        title,\n        id: `card-${id}`,\n        list: listId,\n      };\n\n      return { ...state, [`card-${id}`]: newCard };\n    }\n    case EDIT_CARD: {\n      const { id, newText } = action.payload;\n      const card = state[id];\n      card.text = newText;\n      return { ...state, [`card-${id}`]: card };\n    }\n\n    case DELETE_CARD: {\n      const { id } = action.payload;\n      const newState = state;\n      delete newState[id];\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Nav/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/constants.js",[],["151","152"],"/Users/michaelparkadze/Repos/react-trello-clone/src/views/Boards/index.jsx",["153","154","155","156","157"],"import { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CreateBoardModal from \"../../components/CreateBoardModal\";\nimport { mergeDataWithKey } from \"../../utils\";\nimport { db, auth, firebase } from \"../../firebase\";\nimport { Button } from \"antd\";\nimport { UserContext } from \"../../providers/UserProvider\";\n\nfunction Boards(props) {\n  const user = useContext(UserContext);\n  // const { authenticated } = props;\n  // const dispatch = useDispatch();\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [boards, setBoards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  // const { boards, error } = useSelector((state) => state.boardReducer);\n  // const [newBoardTitle, setNewBoardTitle] = useState(\"\");\n\n  // useEffect(() => {}, []);\n  // const handleOnChange = (e) => {\n  //   const newBoardTitle = e.target.value;\n  //   setNewBoardTitle(newBoardTitle);\n  // };\n\n  // Get boards\n  useEffect(() => {\n    console.log(props);\n    // setLoading(true);\n    db.onceGetBoards()\n      .then((snapshot) => {\n        if (!snapshot.val()) {\n          return;\n        }\n        setBoards(mergeDataWithKey(snapshot.val()));\n      })\n      .catch((err) => {\n        console.log(\"erorr\");\n        console.error(err);\n      });\n\n    // .then((snapshot) => {\n    //   console.log(\"something\");\n    //   if (!snapshot.val()) {\n    //     return;\n    //   } else {\n    //     console.log(\"setting boards data\");\n    //     setBoards(mergeDataWithKey(snapshot.val()));\n    //   }\n    // })\n    // .finally(() => {\n    //   console.log(\"shit\");\n    //   setLoading(false);\n    // });\n  }, []);\n\n  // Create a new board\n  const handleCreateBoard = (board) => {\n    // console.log(board);\n    db.doCreateBoard(board).then((response) => {\n      console.log(response);\n      let updatedBoards = boards;\n      updatedBoards.push(response);\n      setBoards(updatedBoards);\n    });\n  };\n\n  const handleModalOpen = () => {\n    setModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n\n  return (\n    <div>\n      aye\n      {boards?.map((board, index) => {\n        return (\n          <Link to={`b/${board.key}/${board.title}`} key={index}>\n            <div>{board.title}</div>\n          </Link>\n        );\n      })}\n      <CreateBoardModal\n        onCreateBoard={handleCreateBoard}\n        onCloseModal={handleModalClose}\n        visible={modalOpen}\n      />\n      <Button onClick={() => handleModalOpen()}>Create a board</Button>\n      <Button onClick={() => console.log(boards)}>Check boards</Button>\n      <Button onClick={auth.doSignOut}>Sign out</Button>\n    </div>\n  );\n\n  // return (\n  //   <div className=\"home-container\">\n  //     <div className=\"home-container__boards\">\n  //       {boards?.map((board, index) => {\n  //         return (\n  //           <Link to={`/b/${board.id}/${board.title}`}>\n  //             <button>{board.title}</button>\n  //           </Link>\n  //         );\n  //       })}\n  //     </div>\n  //     <form className=\"home-container__create-board\" onSubmit={handleOnSubmit}>\n  //       <div className=\"home-container__create-board__title\">\n  //         Create a new Board\n  //       </div>\n  //       <input\n  //         type=\"text\"\n  //         placeholder=\"Your boards title...\"\n  //         value={newBoardTitle}\n  //         onChange={handleOnChange}\n  //       />\n  //       <input type=\"submit\" value=\"Create\" />\n  //     </form>\n  //     {error && <span>{error}</span>}\n  //   </div>\n  // );\n}\n\nexport default Boards;\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Board/index.jsx",["158","159","160"],"import { useEffect, useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport List from \"../../components/List\";\nimport CreateList from \"../../components/CreateList\";\nimport { getBoardKey, mergeDataWithKey } from \"../../utils/index\";\nimport { db } from \"../../firebase\";\nimport \"./styles.scss\";\n\nexport default function Board() {\n  const history = useHistory();\n\n  const [lists, setLists] = useState([]);\n  const [cards, setCards] = useState([]);\n  const [boardKey, setBoardKey] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [dataFetched, setDataFetched] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const boardKey = getBoardKey();\n    Promise.all([db.onceGetBoard(boardKey), db.onceGetLists(boardKey)])\n      .then((snapshots) => {\n        const lists = mergeDataWithKey(snapshots[1].val());\n        setLists(lists.sort((a, b) => a.index - b.index));\n\n        setBoardKey(boardKey);\n        setLoading(false);\n        setDataFetched(true);\n      })\n      .catch((error) => {\n        setLoading(false);\n        setDataFetched(false);\n        console.error(error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (dataFetched) {\n      console.log(\"log one time\");\n      console.log(cards);\n    }\n  }, [dataFetched]);\n\n  const handleSetCards = (listCards) => {\n    setCards((prevState) => [...prevState, listCards]);\n  };\n\n  const handleCreateList = (listTitle) => {\n    db.doCreateList(boardKey, { title: listTitle }).then((res) => {\n      const copiedLists = [...lists];\n      const copiedCards = [...cards];\n      copiedCards.push({\n        listKey: res.listKey,\n        cards: [],\n      });\n      // copiedLists.push(res);\n      console.log(res);\n      setLists(copiedLists);\n      setCards(copiedCards);\n    });\n  };\n\n  const handleCreateCard = (params) => {\n    const { listKey, cardTitle } = params;\n    db.doAddCard(listKey, cardTitle)\n      .then(() => db.onceGetCard(listKey))\n      .then((snapshot) => {\n        const snapshotVal = snapshot.val();\n        if (snapshotVal) {\n          // get back the cards\n          // and update the list\n          const newCards = mergeDataWithKey(snapshotVal);\n          const cardsClone = [...cards];\n          let cardsIndex = cardsClone.findIndex(\n            (cards) => cards.listKey === listKey\n          );\n\n          if (cardsIndex !== -1) {\n            cardsClone[cardsIndex] = {\n              ...cardsClone[cardsIndex],\n              cards: newCards,\n            };\n          } else {\n            cardsClone[cardsClone.length] = {\n              listKey: listKey,\n              cards: newCards,\n            };\n          }\n\n          console.log(cardsClone);\n          setCards(cardsClone);\n        }\n      });\n  };\n\n  const handleUpdateList = (listKey, title) => {\n    return db.doUpdateList(boardKey, listKey, { title }).then((res) => {\n      const copiedLists = [...lists];\n      const listIndex = copiedLists.findIndex((list) => list.key === listKey);\n      copiedLists[listIndex] = { ...copiedLists[listIndex], title };\n\n      setLists(copiedLists);\n    });\n  };\n\n  const handleDeleteList = (listKey) => {\n    db.doDeleteList(boardKey, listKey).then(() => {\n      const copiedLists = [...lists];\n      const updatedLists = copiedLists.filter((list) => list.key !== listKey);\n      setLists(updatedLists);\n    });\n  };\n\n  const handleOnDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result;\n\n    let droppableIdStart;\n    let droppableIdEnd;\n    let droppableIndexStart;\n    let droppableIndexEnd;\n\n    if (destination) {\n      droppableIdEnd = destination.droppableId;\n      droppableIndexEnd = destination.index;\n    }\n\n    if (source) {\n      droppableIdStart = source.droppableId;\n      droppableIndexStart = source.index;\n    }\n\n    if (!destination) {\n      return;\n    }\n\n    if (type === \"list\") {\n      const listsClone = [...lists];\n      const pulledOutList = listsClone.splice(droppableIndexStart, 1);\n      listsClone.splice(droppableIndexEnd, 0, ...pulledOutList);\n      setLists(listsClone);\n      db.onListMove({ boardKey, lists: listsClone });\n    }\n\n    // Card Key = draggable id\n    // old list key = source droppableId\n    // new list key = destination droppableId\n    if (type === \"card\") {\n      console.log(result);\n\n      // change ui, and send the data to movecard to update database\n      // change ui means doing forEach\n      if (droppableIdStart === droppableIdEnd) {\n        const cardsClone = [...cards];\n\n        let cardsIndex = cardsClone.findIndex(\n          (cards) => cards.listKey === droppableIdEnd\n        );\n\n        let listCards = cardsClone[cardsIndex].cards;\n        const card = listCards.splice(droppableIndexStart, 1);\n        listCards.splice(droppableIndexEnd, 0, ...card);\n\n        setCards(cardsClone);\n\n        db.doMoveCard({\n          cards: cardsClone[cardsIndex].cards,\n          newIndex: droppableIndexEnd,\n          oldListKey: droppableIdStart,\n          newListKey: droppableIdEnd,\n          cardKey: draggableId,\n        }).then((snapshot) => {\n          console.log(\"moving cards will work\");\n          console.log(mergeDataWithKey(snapshot.val()));\n        });\n        console.log(listCards);\n      }\n\n      if (droppableIdStart !== droppableIdEnd) {\n        const cardsClone = [...cards];\n\n        if (cards.length !== lists.length) {\n          const missingCards = lists.filter(\n            (list) => !cardsClone.some((card) => list.key === card.listKey)\n          );\n\n          missingCards.forEach((list) => {\n            cardsClone.push({\n              listKey: list.key,\n              cards: [],\n            });\n          });\n\n          setCards(cardsClone);\n        }\n\n        let startListIndex = cardsClone.findIndex(\n          (cards) => cards.listKey === droppableIdStart\n        );\n        let endListIndex = cardsClone.findIndex(\n          (cards) => cards.listKey === droppableIdEnd\n        );\n        let startList = cardsClone[startListIndex].cards;\n        let endList = cardsClone[endListIndex].cards;\n\n        const card = startList.splice(droppableIndexStart, 1);\n        endList.splice(droppableIndexEnd, 0, ...card);\n\n        setCards(cardsClone);\n        db.doMoveCard({\n          cards: cardsClone[endListIndex].cards,\n          newIndex: droppableIndexEnd,\n          oldListKey: droppableIdStart,\n          newListKey: droppableIdEnd,\n          cardKey: draggableId,\n        }).then((snapshot) => {\n          console.log(\"moving cards will work\");\n          console.log(mergeDataWithKey(snapshot.val()));\n        });\n      }\n    }\n  };\n  return (\n    <>\n      {loading ? (\n        \"Loading\"\n      ) : (\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          <button\n            onClick={() => {\n              console.log(lists);\n              console.log(cards);\n            }}\n          >\n            check state\n          </button>\n          <div className=\"board-wrapper\">\n            <Droppable\n              droppableId=\"all-lists\"\n              direction=\"horizontal\"\n              type=\"list\"\n            >\n              {(provided) => (\n                <div\n                  className=\"lists-container\"\n                  {...provided.droppableProps}\n                  ref={provided.innerRef}\n                >\n                  {lists?.map((list, index) => {\n                    const listCards = cards.find(\n                      (cards) => cards.listKey === list.key\n                    );\n\n                    return (\n                      <>\n                        <List\n                          key={list.key}\n                          listKey={list.key}\n                          listTitle={list.title}\n                          cards={listCards}\n                          setCards={handleSetCards}\n                          handleCreateCard={handleCreateCard}\n                          setDataFetched={setDataFetched}\n                          index={index}\n                          title={list.title}\n                          handleUpdateList={handleUpdateList}\n                          handleDeleteList={handleDeleteList}\n                        />\n                      </>\n                    );\n                  })}\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n            <CreateList handleCreateList={handleCreateList} />\n          </div>\n        </DragDropContext>\n      )}\n    </>\n  );\n\n  // const handleDeleteBoard = (boardKey) => {\n  //   db.doDeleteBoard(boardKey).then(() => {\n  //     history.push(\"/boards\");\n  //   });\n  // };\n\n  // const handleUpdateBoard = (boardKey, title) => {\n  //   db.doUpdateBoard(boardKey, title).then(() => {\n  //     const updatedBoard = { ...this.state.board, ...title };\n  //     setBoard(updatedBoard);\n  //   });\n  // };\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/boardActions.js",[],["161","162"],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/cardActions.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/listActions.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateList/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/index.jsx",["163"],"import { useState, useEffect } from \"react\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { mergeDataWithKey } from \"../../utils\";\nimport { db } from \"../../firebase\";\nimport CreateCard from \"../CreateCard\";\nimport ListHeader from \"./ListHeader\";\nimport Card from \"../Card\";\nimport \"./styles.scss\";\n\nexport default function List(props) {\n  const [creatingCard, setCreatingCard] = useState(false);\n\n  const {\n    cards,\n    setCards,\n    listTitle,\n    listKey,\n    handleCreateCard,\n    handleUpdateList,\n    handleDeleteList,\n    index,\n  } = props;\n\n  useEffect(() => {\n    db.onceGetCard(listKey).then((snapshot) => {\n      const snapshotVal = snapshot.val();\n      if (snapshotVal) {\n        const data = {\n          listKey,\n          cards: mergeDataWithKey(snapshotVal).sort(\n            (a, b) => a.index - b.index\n          ),\n        };\n        setCards(data);\n      }\n    });\n  }, []);\n\n  const handleCreatingCard = () => {\n    setCreatingCard(!creatingCard);\n  };\n\n  return (\n    <Draggable key={listKey} draggableId={String(listKey)} index={index}>\n      {(provided) => (\n        <div\n          className=\"list-container\"\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <ListHeader\n            title={listTitle}\n            listKey={listKey}\n            handleUpdateList={handleUpdateList}\n            handleDeleteList={handleDeleteList}\n          />\n          <div className=\"list-container__content\">\n            <div className=\"list-container__content__cards\">\n              <Droppable droppableId={String(listKey)} type=\"card\">\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    {cards &&\n                      cards.cards?.map((card, index) => (\n                        <Card\n                          key={card.key}\n                          index={index}\n                          cardKey={card.key}\n                          title={card.title}\n                          listKey={listKey}\n                        />\n                      ))}\n                    {provided.placeholder}\n                    <CreateCard\n                      listKey={listKey}\n                      creatingCard={creatingCard}\n                      handleCreatingCard={handleCreatingCard}\n                      handleCreateCard={handleCreateCard}\n                    />\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/ListHeader.jsx",["164"],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/Card/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateCard/index.jsx",["165"],"/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignIn/index.jsx",["166"],"import { useState } from \"react\";\nimport { auth } from \"../../firebase\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { Form, Input, Button, Checkbox } from \"antd\";\nimport \"./styles.scss\";\nimport { MailOutlined, LockOutlined } from \"@ant-design/icons\";\n\nexport default function SignIn() {\n  const history = useHistory();\n  const [userDetails, setUserDetails] = useState({\n    email: \"\",\n    password: \"\",\n    error: null,\n  });\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n\n    const { email, password } = userDetails;\n\n    return auth\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => history.push(\"/boards\"))\n      .catch((error) =>\n        setUserDetails((prevState) => ({ ...prevState, error: error.message }))\n      );\n  };\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    setUserDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return (\n    <div className=\"sign-in-container\">\n      <Form>\n        <h1>Sign in</h1>\n        <Form.Item\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email address\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<MailOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<LockOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" block onClick={(e) => handleOnSubmit(e)}>\n            Sign in\n          </Button>\n        </Form.Item>\n        {userDetails.error && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>\n            {userDetails.error}\n          </div>\n        )}\n        <Form.Item>\n          <div style={{ marginBottom: \"12px\" }}>\n            <Link to=\"/forgot-password\">Forgot your password?</Link>\n          </div>\n          Don't have an account? <Link to=\"/sign-up\">Sign up</Link>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignUp/index.jsx",["167","168"],"import { useState } from \"react\";\nimport { auth, db } from \"../../firebase\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { Form, Input, Button, Checkbox, Icon } from \"antd\";\nimport { UserOutlined, LockOutlined, MailOutlined } from \"@ant-design/icons\";\nimport \"./styles.scss\";\n\nexport default function SignUp() {\n  const history = useHistory();\n  const [userDetails, setUserDetails] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    error: null,\n  });\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n\n    const { fullName, email, password } = userDetails;\n\n    return auth\n      .doCreateUserWithEmailAndPassword(email, password, fullName)\n      .then((authUser) => {\n        db.doCreateUser(authUser.user.uid, fullName, email);\n        history.push(\"/boards\");\n      })\n      .catch((error) =>\n        setUserDetails((prevState) => ({ ...prevState, error: error.message }))\n      );\n  };\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    setUserDetails((prevState) => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return (\n    <div className=\"sign-up-container\">\n      <Form>\n        <h1>Sign up</h1>\n\n        <Form.Item\n          name=\"fullName\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input\n            type=\"text\"\n            name=\"fullName\"\n            placeholder=\"Enter your full name\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<UserOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your username!\" }]}\n        >\n          <Input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Enter your email address\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<MailOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter a password\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<LockOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"confirmPassword\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password\n            name=\"confirmPassword\"\n            type=\"password\"\n            placeholder=\"Confirm password\"\n            onChange={(e) => handleOnChange(e)}\n            prefix={<LockOutlined style={{ color: \"rgba(0,0,0,.25)\" }} />}\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" block onClick={(e) => handleOnSubmit(e)}>\n            Sign up\n          </Button>\n        </Form.Item>\n        {userDetails.error && (\n          <div style={{ color: \"red\", fontSize: \"0.75rem\" }}>\n            {userDetails.error}\n          </div>\n        )}\n        <Form.Item>\n          Already have an account? <Link to=\"/sign-in\">Sign in</Link>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/index.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/auth.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/db.js",["169","170"],"import { db } from \"./firebase\";\nimport { getUser } from \"./user\";\n\nconst boardsRef = db.ref(\"boards\");\nconst listsRef = db.ref(\"lists\");\nconst cardsRef = db.ref(\"cards\");\n\nexport const doCreateUser = (id, username, email) =>\n  db.ref(`users/${id}`).set({\n    username,\n    email,\n  });\n\nexport const onceGetUsers = () => db.ref(\"users\").once(\"value\");\n\nexport const doCreateBoard = async (board) => {\n  const uid = getUser().uid;\n  const id = boardsRef.push().key;\n  await boardsRef.child(uid).child(id).set(board);\n  board.boardKey = id;\n  return board;\n};\n\nexport const doDeleteBoard = async (boardKey) => {\n  const uid = getUser().uid;\n  await boardsRef.child(uid).child(boardKey).remove();\n};\n\nexport const doUpdateBoard = async (boardKey, title) => {\n  const uid = getUser().uid;\n  await boardsRef\n    .child(uid)\n    .child(boardKey)\n    .update({\n      ...title,\n    });\n};\n\nexport const onceGetBoards = () => {\n  const uid = getUser().uid;\n  return boardsRef.child(uid).once(\"value\");\n};\n\nexport const doEditBoard = async (boardKey, board) => {\n  const uid = getUser().uid;\n\n  await boardsRef\n    .child(uid)\n    .child(boardKey)\n    .update({\n      ...board,\n    });\n  return board;\n};\n\nexport const onceGetBoard = (key) => {\n  const uid = getUser().uid;\n\n  return boardsRef.child(uid).child(`${key}`).once(\"value\");\n};\n\nexport const onListMove = async (params) => {\n  const { boardKey, lists } = params;\n  console.log(lists);\n  var updates = {};\n\n  lists.forEach((list, index) => {\n    console.log(listsRef);\n    const newList = { ...list, index };\n    updates[list.key] = newList;\n  });\n\n  listsRef.child(boardKey).update(updates);\n};\n\nexport const onceGetLists = (key) => listsRef.child(key).once(\"value\");\n\nexport const doCreateList = async (boardKey, list) => {\n  let listIndex;\n  // Get amount of lists to determine new list index\n  listsRef\n    .child(boardKey)\n    .once(\"value\")\n    .then((snapshot) => {\n      const listsObject = snapshot.val();\n      listIndex = Object.keys(listsObject).length;\n    });\n\n  const id = listsRef.push().key;\n  await listsRef.child(boardKey).child(id).set(list);\n  list.key = id;\n  list.index = listIndex - 1;\n  return list;\n};\n\nexport const doDeleteList = (boardKey, listKey) =>\n  db\n    .ref(`lists/${boardKey}`)\n    .child(`${listKey}`)\n    .remove()\n    .then(() => db.ref(\"cards/\").child(`${listKey}`).remove());\n\nexport const doUpdateList = async (boardKey, listKey, list) => {\n  await listsRef\n    .child(boardKey)\n    .child(listKey)\n    .update({\n      ...list,\n    });\n  return list;\n};\n\nexport const doAddCard = async (listKey, cardTitle) => {\n  let cardIndex;\n  // Get amount of lists to determine new list index\n  await db\n    .ref(`cards/${listKey}`)\n    .once(\"value\")\n    .then((snapshot) => {\n      const cardsObject = snapshot.val();\n      if (cardsObject !== undefined && cardsObject !== null) {\n        cardIndex = Object.keys(cardsObject).length;\n      } else cardIndex = 0;\n    });\n\n  db.ref(`cards/${listKey}`).push({\n    title: cardTitle,\n    index: cardIndex,\n  });\n};\n\nexport const onceGetCard = (listKey) =>\n  db.ref(`cards/${listKey}`).once(\"value\");\n\nexport const doEditCard = async (listKey, cardKey, card) => {\n  await cardsRef\n    .child(listKey)\n    .child(cardKey)\n    .update({\n      ...card,\n    });\n  card.key = cardKey;\n  return card;\n};\n\nexport const doMoveCard = async (params) => {\n  const { oldListKey, newListKey, cardKey, newIndex, cards } = params;\n\n  // we copy the card details\n  // we remove it from the old list\n  // and we insert it in the new list\n\n  // If its same list\n  // Change\n\n  let card;\n  await db\n    .ref(`cards/${oldListKey}`)\n    .child(`${cardKey}`)\n    .once(\"value\")\n    .then((snapshot) => {\n      card = snapshot.val();\n    });\n\n  var updates = {};\n\n  cards.forEach((card, index) => {\n    const newCard = { ...card, index };\n    updates[card.key] = newCard;\n  });\n\n  db.ref(`cards/${oldListKey}`)\n    .child(`${cardKey}`)\n    .remove()\n    .then(() => {\n      // remove the card from old list\n      // and update all cards on new list\n\n      db.ref(`cards/${newListKey}`).update(updates);\n      // console.log(\"editing \");\n    });\n\n  return onceGetCard(newListKey);\n\n  // db.ref(`cards/${oldListKey}`)\n  //   .child(`${cardKey}`)\n  //   .remove()\n  //   .then(() =>\n  //     db.ref(`cards/${newListKey}/${cardKey}`).set({\n  //       ...card,\n  //     })\n  //   );\n};\n\nexport const doDeleteCard = (listKey, cardKey) =>\n  db.ref(`cards/${listKey}/`).child(`${cardKey}`).remove();\n","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/user.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/firebase.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/utils/index.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateBoardModal/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/providers/UserProvider.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/routes/PrivateRoute.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"171","replacedBy":"175"},{"ruleId":"173","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":20,"column":1,"nodeType":"179","endLine":122,"endColumn":3},{"ruleId":"180","severity":1,"message":"181","line":6,"column":3,"nodeType":"182","messageId":"183","endLine":6,"endColumn":15},{"ruleId":"177","severity":1,"message":"178","line":21,"column":1,"nodeType":"179","endLine":83,"endColumn":3},{"ruleId":"177","severity":1,"message":"178","line":11,"column":1,"nodeType":"179","endLine":40,"endColumn":3},{"ruleId":"171","replacedBy":"184"},{"ruleId":"173","replacedBy":"185"},{"ruleId":"180","severity":1,"message":"186","line":5,"column":20,"nodeType":"182","messageId":"183","endLine":5,"endColumn":28},{"ruleId":"180","severity":1,"message":"187","line":10,"column":9,"nodeType":"182","messageId":"183","endLine":10,"endColumn":13},{"ruleId":"180","severity":1,"message":"188","line":16,"column":10,"nodeType":"182","messageId":"183","endLine":16,"endColumn":17},{"ruleId":"180","severity":1,"message":"189","line":16,"column":19,"nodeType":"182","messageId":"183","endLine":16,"endColumn":29},{"ruleId":"190","severity":1,"message":"191","line":55,"column":6,"nodeType":"192","endLine":55,"endColumn":8,"suggestions":"193"},{"ruleId":"180","severity":1,"message":"194","line":2,"column":22,"nodeType":"182","messageId":"183","endLine":2,"endColumn":26},{"ruleId":"180","severity":1,"message":"195","line":11,"column":9,"nodeType":"182","messageId":"183","endLine":11,"endColumn":16},{"ruleId":"190","severity":1,"message":"196","line":43,"column":6,"nodeType":"192","endLine":43,"endColumn":19,"suggestions":"197"},{"ruleId":"171","replacedBy":"198"},{"ruleId":"173","replacedBy":"199"},{"ruleId":"190","severity":1,"message":"200","line":37,"column":6,"nodeType":"192","endLine":37,"endColumn":8,"suggestions":"201"},{"ruleId":"190","severity":1,"message":"202","line":13,"column":6,"nodeType":"192","endLine":13,"endColumn":8,"suggestions":"203"},{"ruleId":"204","severity":1,"message":"205","line":69,"column":9,"nodeType":"206","endLine":69,"endColumn":41},{"ruleId":"180","severity":1,"message":"207","line":4,"column":31,"nodeType":"182","messageId":"183","endLine":4,"endColumn":39},{"ruleId":"180","severity":1,"message":"207","line":4,"column":31,"nodeType":"182","messageId":"183","endLine":4,"endColumn":39},{"ruleId":"180","severity":1,"message":"208","line":4,"column":41,"nodeType":"182","messageId":"183","endLine":4,"endColumn":45},{"ruleId":"180","severity":1,"message":"209","line":147,"column":44,"nodeType":"182","messageId":"183","endLine":147,"endColumn":52},{"ruleId":"180","severity":1,"message":"210","line":162,"column":7,"nodeType":"182","messageId":"183","endLine":162,"endColumn":11},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],["211"],["212"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'DELETE_BOARD' is defined but never used.","Identifier","unusedVar",["211"],["212"],"'firebase' is defined but never used.","'user' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["213"],"'Link' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'cards'. Either include it or remove the dependency array.",["214"],["211"],["212"],"React Hook useEffect has missing dependencies: 'listKey' and 'setCards'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["216"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Checkbox' is defined but never used.","'Icon' is defined but never used.","'newIndex' is assigned a value but never used.","'card' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [props]",{"range":"225","text":"226"},"Update the dependencies array to be: [cards, dataFetched]",{"range":"227","text":"228"},"Update the dependencies array to be: [listKey, setCards]",{"range":"229","text":"230"},"Update the dependencies array to be: [title]",{"range":"231","text":"232"},[1647,1649],"[props]",[1341,1354],"[cards, dataFetched]",[914,916],"[listKey, setCards]",[427,429],"[title]"]