[{"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\index.js":"1","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\App.js":"2","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\reportWebVitals.js":"3","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\routes\\index.jsx":"4","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\views\\Board\\index.jsx":"5","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\store.js":"6","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\rootReducer.js":"7","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\reducers\\cardReducer.js":"8","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\reducers\\boardReducer.js":"9","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\constants.js":"10","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\actions\\boardActions.js":"11","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\List\\index.jsx":"12","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\actions\\listActions.js":"13","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\Card\\index.jsx":"14","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\reducers\\listReducer.js":"15","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\actions\\cardActions.js":"16","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\List\\ListHeader.jsx":"17","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\Nav\\index.jsx":"18","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\CreateList\\index.jsx":"19","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\views\\Boards\\index.jsx":"20","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\CreateCard\\index.jsx":"21"},{"size":715,"mtime":1608902940173,"results":"22","hashOfConfig":"23"},{"size":170,"mtime":1609078850082,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":328,"mtime":1609077618846,"results":"26","hashOfConfig":"23"},{"size":4015,"mtime":1609078910617,"results":"27","hashOfConfig":"23"},{"size":309,"mtime":1608902686829,"results":"28","hashOfConfig":"23"},{"size":334,"mtime":1608917977374,"results":"29","hashOfConfig":"23"},{"size":896,"mtime":1608987613217,"results":"30","hashOfConfig":"23"},{"size":2071,"mtime":1609057535927,"results":"31","hashOfConfig":"23"},{"size":450,"mtime":1609065394211,"results":"32","hashOfConfig":"23"},{"size":353,"mtime":1608907764533,"results":"33","hashOfConfig":"23"},{"size":2250,"mtime":1609080323221,"results":"34","hashOfConfig":"23"},{"size":1610,"mtime":1609065588915,"results":"35","hashOfConfig":"23"},{"size":724,"mtime":1608987984565,"results":"36","hashOfConfig":"23"},{"size":2327,"mtime":1608987517096,"results":"37","hashOfConfig":"23"},{"size":558,"mtime":1608986964593,"results":"38","hashOfConfig":"23"},{"size":846,"mtime":1609065823271,"results":"39","hashOfConfig":"23"},{"size":296,"mtime":1609078469274,"results":"40","hashOfConfig":"23"},{"size":245,"mtime":1609080194364,"results":"41","hashOfConfig":"23"},{"size":1557,"mtime":1609078070211,"results":"42","hashOfConfig":"23"},{"size":239,"mtime":1609080418416,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1eh0z7i",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\index.js",[],["97","98"],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\App.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\reportWebVitals.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\routes\\index.jsx",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\views\\Board\\index.jsx",["99","100","101","102","103","104","105"],"import { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addList, sort } from \"../../redux/actions/listActions\";\r\nimport { setActiveBoard } from \"../../redux/actions/boardActions\";\r\nimport { createCard } from \"../../redux/actions/cardActions\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport CreateList from \"../../components/CreateList\";\r\nimport List from \"../../components/List\";\r\nimport Nav from \"../../components/Nav\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function Board(props) {\r\n  const dispatch = useDispatch();\r\n  const [board, setBoard] = useState();\r\n\r\n  const { boards } = useSelector((state) => state.boardReducer);\r\n  const lists = useSelector((state) => state.listReducer);\r\n  const cards = useSelector((state) => state.cardReducer);\r\n\r\n  const { id, title } = props.match.params;\r\n  useEffect(() => {\r\n    const board = boards.find((board) => board.id === id);\r\n    setBoard(board);\r\n    dispatch(setActiveBoard(id));\r\n  }, []);\r\n\r\n  const handleOnDragEnd = (result) => {\r\n    console.log(result);\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      sort({\r\n        droppableIdStart: source.droppableId,\r\n        droppableIdEnd: destination.droppableId,\r\n        droppableIndexStart: source.index,\r\n        droppableIndexEnd: destination.index,\r\n        draggableId: draggableId,\r\n        type: type,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateList = () => {\r\n    dispatch(addList(\"Hello\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={handleOnDragEnd}>\r\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\r\n          {(provided) => (\r\n            <div\r\n              className=\"lists-container\"\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {board?.lists.map((listId, index) => {\r\n                const list = lists[listId];\r\n                if (list) {\r\n                  const listCards = list.cards.map((cardId) => cards[cardId]);\r\n\r\n                  return (\r\n                    <List\r\n                      listId={list.id}\r\n                      key={list.id}\r\n                      title={list.title}\r\n                      cards={listCards}\r\n                      index={index}\r\n                    />\r\n                  );\r\n                }\r\n              })}\r\n              {provided.placeholder}\r\n              <CreateList handleCreateList={handleCreateList} />\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </>\r\n\r\n    // <div className=\"board-container\">\r\n    //   <div className=\"board-container__header\">{title}</div>\r\n    //   <div className=\"board-container__canvas\">\r\n    // <DragDropContext onDragEnd={handleOnDragEnd}>\r\n    //   <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\r\n    //     {(provided) => (\r\n    //       <div\r\n    //         className=\"lists-container\"\r\n    //         {...provided.droppableProps}\r\n    //         ref={provided.innerRef}\r\n    //       >\r\n    //         {board?.lists.map((listId, index) => {\r\n    //           const list = lists[listId];\r\n    //           if (list) {\r\n    //             const listCards = list.cards.map((cardId) => cards[cardId]);\r\n\r\n    //             return (\r\n    //               <List\r\n    //                 listId={list.id}\r\n    //                 key={list.id}\r\n    //                 title={list.title}\r\n    //                 cards={listCards}\r\n    //                 index={index}\r\n    //               />\r\n    //             );\r\n    //           }\r\n    //         })}\r\n    //         {provided.placeholder}\r\n    //         <button onClick={handleCreateList}>Create List</button>\r\n    //       </div>\r\n    //     )}\r\n    //   </Droppable>\r\n    // </DragDropContext>\r\n    //   </div>\r\n    // </div>\r\n  );\r\n}\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\store.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\rootReducer.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\reducers\\cardReducer.js",["106"],"import { CREATE_CARD, DELETE_CARD, EDIT_CARD } from \"../constants\";\r\n\r\nconst initialState = {\r\n  \"card-0\": {\r\n    title: \"Last Episode\",\r\n    id: `card-0`,\r\n    list: \"list-0\",\r\n  },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_CARD: {\r\n      const { title, listId, id } = action.payload;\r\n\r\n      const newCard = {\r\n        title,\r\n        id: `card-${id}`,\r\n        list: listId,\r\n      };\r\n\r\n      return { ...state, [`card-${id}`]: newCard };\r\n    }\r\n    case EDIT_CARD: {\r\n      const { id, newText } = action.payload;\r\n      const card = state[id];\r\n      card.text = newText;\r\n      return { ...state, [`card-${id}`]: card };\r\n    }\r\n\r\n    case DELETE_CARD: {\r\n      const { id } = action.payload;\r\n      const newState = state;\r\n      delete newState[id];\r\n      return newState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\reducers\\boardReducer.js",["107","108"],"import {\r\n  CREATE_BOARD,\r\n  SET_ACTIVE_BOARD,\r\n  DRAG_HAPPENED,\r\n  ADD_LIST,\r\n  DELETE_BOARD,\r\n  DELETE_LIST,\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n  boards: [\r\n    {\r\n      id: \"board-0\",\r\n      lists: [\"list-0\"],\r\n      title: \"myboard\",\r\n    },\r\n  ],\r\n  activeBoard: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_LIST: {\r\n      const { boardId, id } = action.payload;\r\n\r\n      // const board = state[boardId];\r\n      const board = state.boards.find((board) => board.id === boardId);\r\n      const newListId = `list-${id}`;\r\n      const newLists = [...board.lists, newListId];\r\n      board.lists = newLists;\r\n      return { ...state, [boardId]: board };\r\n    }\r\n\r\n    case DRAG_HAPPENED: {\r\n      const { boardId } = action.payload;\r\n      const board = state.boards.find((board) => board.id === boardId);\r\n      const lists = board.lists;\r\n      const { droppableIndexEnd, droppableIndexStart, type } = action.payload;\r\n\r\n      // draggin lists around\r\n      if (type === \"list\") {\r\n        const pulledOutList = lists.splice(droppableIndexStart, 1);\r\n        lists.splice(droppableIndexEnd, 0, ...pulledOutList);\r\n        board.lists = lists;\r\n\r\n        return { ...state, [boardId]: board };\r\n      }\r\n      return state;\r\n    }\r\n    case DELETE_LIST: {\r\n      const { listId, boardId } = action.payload;\r\n      const board = state[boardId];\r\n      const lists = board.lists;\r\n      const newLists = lists.filter((id) => id !== listId);\r\n      board.lists = newLists;\r\n      return { ...state, [boardId]: board };\r\n    }\r\n\r\n    case CREATE_BOARD: {\r\n      const { title, id } = action.payload;\r\n\r\n      const boardsCopy = [...state.boards];\r\n      const newBoard = {\r\n        id: id,\r\n        title: title,\r\n        lists: [],\r\n      };\r\n      boardsCopy.push(newBoard);\r\n\r\n      return { ...state, boards: boardsCopy };\r\n    }\r\n\r\n    case SET_ACTIVE_BOARD: {\r\n      return {\r\n        ...state,\r\n        activeBoard: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\constants.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\actions\\boardActions.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\List\\index.jsx",["109","110","111","112"],"import { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { createCard } from \"../../redux/actions/cardActions\";\r\nimport { deleteList } from \"../../redux/actions/listActions\";\r\nimport CreateCard from \"../CreateCard\";\r\nimport ListHeader from \"./ListHeader\";\r\nimport Card from \"../Card\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function List(props) {\r\n  const [listCards, setListCards] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { listId, index, title, cards } = props;\r\n\r\n  // useEffect(() => {\r\n  //   setListCards(cards);\r\n  // }, [cards]);\r\n\r\n  const handleCreateCard = () => {\r\n    dispatch(createCard({ listId, title: \"new card alert\" }));\r\n  };\r\n\r\n  const handleDeleteList = () => {\r\n    dispatch(deleteList(listId));\r\n  };\r\n\r\n  return (\r\n    <Draggable key={listId} draggableId={String(listId)} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          className=\"list-container\"\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <div className=\"list-container__content\">\r\n            <div className=\"list-container__content__header\">\r\n              <ListHeader title={title} />\r\n            </div>\r\n            <div className=\"list-container__content__cards\">\r\n              <Droppable droppableId={String(listId)} type=\"card\">\r\n                {(provided) => (\r\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                    {cards?.map((card, index) => {\r\n                      return (\r\n                        <Card\r\n                          key={card.id}\r\n                          index={index}\r\n                          id={card.id}\r\n                          title={card.title}\r\n                          listId={listId}\r\n                        />\r\n                      );\r\n                    })}\r\n                    {provided.placeholder}\r\n                    <CreateCard handleCreateCard={handleCreateCard} />\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\actions\\listActions.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\Card\\index.jsx",["113"],"import { Draggable } from \"react-beautiful-dnd\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function Card(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { index, id, title } = props;\r\n  return (\r\n    <Draggable draggableId={String(id)} index={index}>\r\n      {(provided) => (\r\n        <>\r\n          <div\r\n            className=\"card-container\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            // onDoubleClick={() => setIsEditing(true)}\r\n          >\r\n            <div className=\"card-container__content\">{title}</div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n",["114","115"],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\reducers\\listReducer.js",["116"],"import {\r\n  ADD_LIST,\r\n  DELETE_LIST,\r\n  DRAG_HAPPENED,\r\n  CREATE_CARD,\r\n} from \"../constants\";\r\n\r\nconst initialState = {\r\n  \"list-0\": {\r\n    id: \"list-0\",\r\n    cards: [\"card-0\"],\r\n    title: \"myList\",\r\n    board: \"board-0\",\r\n  },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_LIST: {\r\n      const { title, id } = action.payload;\r\n\r\n      const newList = {\r\n        title: title,\r\n        id: `list-${id}`,\r\n        cards: [],\r\n      };\r\n\r\n      const newState = { ...state, [`list-${id}`]: newList };\r\n\r\n      return newState;\r\n    }\r\n\r\n    case CREATE_CARD: {\r\n      const { listId, id } = action.payload;\r\n      const list = state[listId];\r\n      list.cards.push(`card-${id}`);\r\n      return { ...state, [listId]: list };\r\n    }\r\n\r\n    case DRAG_HAPPENED:\r\n      const {\r\n        droppableIdStart,\r\n        droppableIdEnd,\r\n        droppableIndexEnd,\r\n        droppableIndexStart,\r\n        type,\r\n      } = action.payload;\r\n\r\n      // draggin lists around - the listOrderReducer should handle this\r\n      if (type === \"list\") {\r\n        return state;\r\n      }\r\n\r\n      // in the same list\r\n      if (droppableIdStart === droppableIdEnd) {\r\n        const list = state[droppableIdStart];\r\n        console.log(action.payload);\r\n        const card = list.cards.splice(droppableIndexStart, 1);\r\n        list.cards.splice(droppableIndexEnd, 0, ...card);\r\n        return { ...state, [droppableIdStart]: list };\r\n      }\r\n\r\n      // other list\r\n      if (droppableIdStart !== droppableIdEnd) {\r\n        // find the list where the drag happened\r\n        const listStart = state[droppableIdStart];\r\n        // pull out the card from this list\r\n        const card = listStart.cards.splice(droppableIndexStart, 1);\r\n        // find the list where the drag ended\r\n        const listEnd = state[droppableIdEnd];\r\n\r\n        // put the card in the new list\r\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n        return {\r\n          ...state,\r\n          [droppableIdStart]: listStart,\r\n          [droppableIdEnd]: listEnd,\r\n        };\r\n      }\r\n      return state;\r\n\r\n    case DELETE_LIST: {\r\n      const { listId } = action.payload;\r\n      const newState = state;\r\n      delete newState[listId];\r\n      return newState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\redux\\actions\\cardActions.js",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\List\\ListHeader.jsx",["117"],"import { useState } from \"react\";\r\n\r\nexport default function ListHeader(props) {\r\n  const [headerTitle, setHeaderTitle] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const { title } = props;\r\n  const handleEnableEdit = () => {\r\n    setHeaderTitle(title);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleTitleChange = (e) => {\r\n    setHeaderTitle(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEditing ? (\r\n        <form\r\n          onSubmit={() => setIsEditing(false)}\r\n          onBlur={() => setIsEditing(false)}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            // value={title}\r\n            onChange={(e) => handleTitleChange(e)}\r\n            autoFocus\r\n          />\r\n        </form>\r\n      ) : (\r\n        <div onClick={() => handleEnableEdit()}>{title}</div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\Nav\\index.jsx",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\CreateList\\index.jsx",[],"C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\views\\Boards\\index.jsx",["118"],"import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createBoard } from \"../../redux/actions/boardActions\";\r\nimport Nav from \"../../components/Nav\";\r\n\r\nexport default function Home() {\r\n  const dispatch = useDispatch();\r\n  const { boards, error } = useSelector((state) => state.boardReducer);\r\n  const [newBoardTitle, setNewBoardTitle] = useState(\"\");\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const handleOnChange = (e) => {\r\n    const newBoardTitle = e.target.value;\r\n    setNewBoardTitle(newBoardTitle);\r\n  };\r\n\r\n  const handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"submitted\");\r\n    dispatch(createBoard(newBoardTitle));\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"home-container__boards\">\r\n        {boards?.map((board, index) => {\r\n          return (\r\n            <Link to={`/b/${board.id}/${board.title}`}>\r\n              <button>{board.title}</button>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n      <form className=\"home-container__create-board\" onSubmit={handleOnSubmit}>\r\n        <div className=\"home-container__create-board__title\">\r\n          Create a new Board\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Your boards title...\"\r\n          value={newBoardTitle}\r\n          onChange={handleOnChange}\r\n        />\r\n        <input type=\"submit\" value=\"Create\" />\r\n      </form>\r\n      {error && <span>{error}</span>}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\parka\\Documents\\GitHub\\react-trello-clone\\src\\components\\CreateCard\\index.jsx",["119"],"import \"./styles.scss\";\r\n\r\nexport default function CreateCard(props) {\r\n  const { handleCreateCard } = props;\r\n  return (\r\n    <div className=\"create-card\" onClick={handleCreateCard}>\r\n      <a>+ Add another card</a>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":10,"nodeType":"126","messageId":"127","endLine":1,"endColumn":14},{"ruleId":"124","severity":1,"message":"128","line":6,"column":10,"nodeType":"126","messageId":"127","endLine":6,"endColumn":20},{"ruleId":"124","severity":1,"message":"129","line":7,"column":38,"nodeType":"126","messageId":"127","endLine":7,"endColumn":47},{"ruleId":"124","severity":1,"message":"130","line":10,"column":8,"nodeType":"126","messageId":"127","endLine":10,"endColumn":11},{"ruleId":"124","severity":1,"message":"131","line":21,"column":15,"nodeType":"126","messageId":"127","endLine":21,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":26,"column":6,"nodeType":"134","endLine":26,"endColumn":8,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":62,"column":49,"nodeType":"138","messageId":"139","endLine":62,"endColumn":51},{"ruleId":"140","severity":1,"message":"141","line":11,"column":1,"nodeType":"142","endLine":40,"endColumn":3},{"ruleId":"124","severity":1,"message":"143","line":6,"column":3,"nodeType":"126","messageId":"127","endLine":6,"endColumn":15},{"ruleId":"140","severity":1,"message":"141","line":21,"column":1,"nodeType":"142","endLine":82,"endColumn":3},{"ruleId":"124","severity":1,"message":"144","line":1,"column":20,"nodeType":"126","messageId":"127","endLine":1,"endColumn":29},{"ruleId":"124","severity":1,"message":"145","line":12,"column":10,"nodeType":"126","messageId":"127","endLine":12,"endColumn":19},{"ruleId":"124","severity":1,"message":"146","line":12,"column":21,"nodeType":"126","messageId":"127","endLine":12,"endColumn":33},{"ruleId":"124","severity":1,"message":"147","line":24,"column":9,"nodeType":"126","messageId":"127","endLine":24,"endColumn":25},{"ruleId":"124","severity":1,"message":"148","line":6,"column":9,"nodeType":"126","messageId":"127","endLine":6,"endColumn":17},{"ruleId":"120","replacedBy":"149"},{"ruleId":"122","replacedBy":"150"},{"ruleId":"140","severity":1,"message":"141","line":17,"column":1,"nodeType":"142","endLine":91,"endColumn":3},{"ruleId":"124","severity":1,"message":"151","line":4,"column":10,"nodeType":"126","messageId":"127","endLine":4,"endColumn":21},{"ruleId":"124","severity":1,"message":"130","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":11},{"ruleId":"152","severity":1,"message":"153","line":7,"column":7,"nodeType":"154","endLine":7,"endColumn":10},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'createCard' is defined but never used.","'Draggable' is defined but never used.","'Nav' is defined but never used.","'title' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'boards', 'dispatch', and 'id'. Either include them or remove the dependency array.","ArrayExpression",["157"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'DELETE_BOARD' is defined but never used.","'useEffect' is defined but never used.","'listCards' is assigned a value but never used.","'setListCards' is assigned a value but never used.","'handleDeleteList' is assigned a value but never used.","'dispatch' is assigned a value but never used.",["155"],["156"],"'headerTitle' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},"Update the dependencies array to be: [boards, dispatch, id]",{"range":"160","text":"161"},[1080,1082],"[boards, dispatch, id]"]