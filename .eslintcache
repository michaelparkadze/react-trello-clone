[{"/Users/michaelparkadze/Repos/react-trello-clone/src/index.js":"1","/Users/michaelparkadze/Repos/react-trello-clone/src/reportWebVitals.js":"2","/Users/michaelparkadze/Repos/react-trello-clone/src/App.js":"3","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/store.js":"4","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/rootReducer.js":"5","/Users/michaelparkadze/Repos/react-trello-clone/src/routes/index.jsx":"6","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/listReducer.js":"7","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/boardReducer.js":"8","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/cardReducer.js":"9","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Nav/index.jsx":"10","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/constants.js":"11","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Boards/index.jsx":"12","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Board/index.jsx":"13","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/boardActions.js":"14","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/cardActions.js":"15","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/listActions.js":"16","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateList/index.jsx":"17","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/index.jsx":"18","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/ListHeader.jsx":"19","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Card/index.jsx":"20","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateCard/index.jsx":"21","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignIn/index.jsx":"22","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignUp/index.jsx":"23","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/index.js":"24","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/auth.js":"25","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/db.js":"26","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/user.js":"27","/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/firebase.js":"28"},{"size":715,"mtime":1610466546216,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1610466546218,"results":"31","hashOfConfig":"30"},{"size":178,"mtime":1610881771430,"results":"32","hashOfConfig":"30"},{"size":297,"mtime":1610466546218,"results":"33","hashOfConfig":"30"},{"size":322,"mtime":1610466546217,"results":"34","hashOfConfig":"30"},{"size":494,"mtime":1610881402551,"results":"35","hashOfConfig":"30"},{"size":3035,"mtime":1610470013762,"results":"36","hashOfConfig":"30"},{"size":2034,"mtime":1610470685038,"results":"37","hashOfConfig":"30"},{"size":856,"mtime":1610466546217,"results":"38","hashOfConfig":"30"},{"size":283,"mtime":1610466546216,"results":"39","hashOfConfig":"30"},{"size":438,"mtime":1610466546217,"results":"40","hashOfConfig":"30"},{"size":1506,"mtime":1610466546218,"results":"41","hashOfConfig":"30"},{"size":3929,"mtime":1610470144843,"results":"42","hashOfConfig":"30"},{"size":336,"mtime":1610466546216,"results":"43","hashOfConfig":"30"},{"size":533,"mtime":1610466546216,"results":"44","hashOfConfig":"30"},{"size":1532,"mtime":1610466546217,"results":"45","hashOfConfig":"30"},{"size":235,"mtime":1610466546216,"results":"46","hashOfConfig":"30"},{"size":2350,"mtime":1610471035840,"results":"47","hashOfConfig":"30"},{"size":1134,"mtime":1610469910558,"results":"48","hashOfConfig":"30"},{"size":698,"mtime":1610466546215,"results":"49","hashOfConfig":"30"},{"size":1067,"mtime":1610471608219,"results":"50","hashOfConfig":"30"},{"size":2473,"mtime":1610883996886,"results":"51","hashOfConfig":"30"},{"size":3329,"mtime":1610883985779,"results":"52","hashOfConfig":"30"},{"size":170,"mtime":1610880395641,"results":"53","hashOfConfig":"30"},{"size":498,"mtime":1610880149128,"results":"54","hashOfConfig":"30"},{"size":2702,"mtime":1610880430926,"results":"55","hashOfConfig":"30"},{"size":83,"mtime":1610880411298,"results":"56","hashOfConfig":"30"},{"size":559,"mtime":1610880506866,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1aq6zp0",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/michaelparkadze/Repos/react-trello-clone/src/index.js",[],["124","125"],"/Users/michaelparkadze/Repos/react-trello-clone/src/reportWebVitals.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/App.js",["126"],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/store.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/rootReducer.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/routes/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/listReducer.js",["127"],"import {\n  ADD_LIST,\n  DELETE_LIST,\n  DRAG_HAPPENED,\n  CREATE_CARD,\n  EDIT_LIST_TITLE,\n} from \"../constants\";\n\nconst initialState = {\n  lists: [\n    {\n      id: \"list-0\",\n      cards: [\"card-0\"],\n      title: \"myList\",\n      board: \"board-0\",\n    },\n  ],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case EDIT_LIST_TITLE: {\n      const { listId, newTitle, boardId } = action.payload;\n\n      const listsClone = [...state.lists];\n      const list = listsClone.find(\n        (item) => item.id === listId && item.board === boardId\n      );\n      list.title = newTitle;\n\n      return {\n        ...state,\n        lists: listsClone,\n      };\n    }\n    case ADD_LIST: {\n      const { title, id, boardId } = action.payload;\n\n      const newList = {\n        title: title,\n        id: `list-${id}`,\n        cards: [],\n        board: boardId,\n      };\n\n      const listsClone = [...state.lists];\n      listsClone.push(newList);\n\n      const newState = { ...state, lists: listsClone };\n\n      return newState;\n    }\n\n    case CREATE_CARD: {\n      const { listId, id } = action.payload;\n      const listsClone = [...state.lists];\n      const list = listsClone.find((item) => item.id === listId);\n      list.cards.push(`card-${id}`);\n\n      return { ...state, lists: listsClone };\n    }\n\n    case DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexEnd,\n        droppableIndexStart,\n        type,\n      } = action.payload;\n\n      // draggin lists around - the listOrderReducer should handle this\n      if (type === \"list\") {\n        return state;\n      }\n\n      // in the same list\n      if (droppableIdStart === droppableIdEnd) {\n        const listsClone = [...state.lists];\n        const list = listsClone.find((item) => item.id === droppableIdStart);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n        console.log(action.payload);\n\n        return { ...state, lists: listsClone };\n      }\n\n      // other list\n      if (droppableIdStart !== droppableIdEnd) {\n        const listsClone = [...state.lists];\n        // find the list where the drag happened\n        const listStart = listsClone.find(\n          (item) => item.id === droppableIdStart\n        );\n        // pull out the card from this list\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        // find the list where the drag ended\n        const listEnd = listsClone.find((item) => item.id === droppableIdEnd);\n\n        // put the card in the new list\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        return {\n          ...state,\n          lists: listsClone,\n        };\n      }\n      return state;\n\n    case DELETE_LIST: {\n      const { listId } = action.payload;\n      const listsClone = [...state.lists];\n      listsClone.filter((item) => item.id !== listId);\n\n      return {\n        ...state,\n        lists: listsClone,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/boardReducer.js",["128","129"],"import {\n  CREATE_BOARD,\n  SET_ACTIVE_BOARD,\n  DRAG_HAPPENED,\n  ADD_LIST,\n  DELETE_BOARD,\n  DELETE_LIST,\n} from \"../constants\";\n\nconst initialState = {\n  boards: [\n    {\n      id: \"board-0\",\n      lists: [\"list-0\"],\n      title: \"myboard\",\n    },\n  ],\n  activeBoard: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_LIST: {\n      const { boardId, id } = action.payload;\n\n      // const board = state[boardId];\n      const boardsClone = [...state.boards];\n      const board = boardsClone.find((item) => item.id === boardId);\n      const newListId = `list-${id}`;\n      const newLists = [...board.lists, newListId];\n      board.lists = newLists;\n      return { ...state, boards: boardsClone };\n    }\n\n    case DRAG_HAPPENED: {\n      const { boardId } = action.payload;\n      const board = state.boards.find((board) => board.id === boardId);\n      const lists = board.lists;\n      const { droppableIndexEnd, droppableIndexStart, type } = action.payload;\n\n      // draggin lists around\n      if (type === \"list\") {\n        const pulledOutList = lists.splice(droppableIndexStart, 1);\n        lists.splice(droppableIndexEnd, 0, ...pulledOutList);\n        board.lists = lists;\n\n        return { ...state, [boardId]: board };\n      }\n      return state;\n    }\n    case DELETE_LIST: {\n      const { listId, boardId } = action.payload;\n      const board = state[boardId];\n      const lists = board.lists;\n      const newLists = lists.filter((id) => id !== listId);\n      board.lists = newLists;\n      return { ...state, [boardId]: board };\n    }\n\n    case CREATE_BOARD: {\n      const { title, id } = action.payload;\n\n      const boardsCopy = [...state.boards];\n      const newBoard = {\n        id: id,\n        title: title,\n        lists: [],\n      };\n      boardsCopy.push(newBoard);\n\n      return { ...state, boards: boardsCopy };\n    }\n\n    case SET_ACTIVE_BOARD: {\n      return {\n        ...state,\n        activeBoard: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/reducers/cardReducer.js",["130"],"import { CREATE_CARD, DELETE_CARD, EDIT_CARD } from \"../constants\";\n\nconst initialState = {\n  \"card-0\": {\n    title: \"Last Episode\",\n    id: `card-0`,\n    list: \"list-0\",\n  },\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_CARD: {\n      const { title, listId, id } = action.payload;\n\n      const newCard = {\n        title,\n        id: `card-${id}`,\n        list: listId,\n      };\n\n      return { ...state, [`card-${id}`]: newCard };\n    }\n    case EDIT_CARD: {\n      const { id, newText } = action.payload;\n      const card = state[id];\n      card.text = newText;\n      return { ...state, [`card-${id}`]: card };\n    }\n\n    case DELETE_CARD: {\n      const { id } = action.payload;\n      const newState = state;\n      delete newState[id];\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Nav/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/constants.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/views/Boards/index.jsx",["131"],"import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createBoard } from \"../../redux/actions/boardActions\";\nimport Nav from \"../../components/Nav\";\n\nexport default function Home() {\n  const dispatch = useDispatch();\n  const { boards, error } = useSelector((state) => state.boardReducer);\n  const [newBoardTitle, setNewBoardTitle] = useState(\"\");\n\n  useEffect(() => {}, []);\n\n  const handleOnChange = (e) => {\n    const newBoardTitle = e.target.value;\n    setNewBoardTitle(newBoardTitle);\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"submitted\");\n    dispatch(createBoard(newBoardTitle));\n  };\n\n  return (\n    <div className=\"home-container\">\n      <div className=\"home-container__boards\">\n        {boards?.map((board, index) => {\n          return (\n            <Link to={`/b/${board.id}/${board.title}`}>\n              <button>{board.title}</button>\n            </Link>\n          );\n        })}\n      </div>\n      <form className=\"home-container__create-board\" onSubmit={handleOnSubmit}>\n        <div className=\"home-container__create-board__title\">\n          Create a new Board\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"Your boards title...\"\n          value={newBoardTitle}\n          onChange={handleOnChange}\n        />\n        <input type=\"submit\" value=\"Create\" />\n      </form>\n      {error && <span>{error}</span>}\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/Board/index.jsx",["132","133","134","135","136","137","138"],"import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addList, sort } from \"../../redux/actions/listActions\";\nimport { setActiveBoard } from \"../../redux/actions/boardActions\";\nimport { createCard } from \"../../redux/actions/cardActions\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport CreateList from \"../../components/CreateList\";\nimport List from \"../../components/List\";\nimport Nav from \"../../components/Nav\";\nimport \"./styles.scss\";\n\nexport default function Board(props) {\n  const dispatch = useDispatch();\n  const [board, setBoard] = useState();\n\n  const { boards } = useSelector((state) => state.boardReducer);\n  const { lists } = useSelector((state) => state.listReducer);\n  const cards = useSelector((state) => state.cardReducer);\n\n  const { id, title } = props.match.params;\n  useEffect(() => {\n    const board = boards.find((board) => board.id === id);\n    setBoard(board);\n    dispatch(setActiveBoard(id));\n  }, []);\n\n  const handleOnDragEnd = (result) => {\n    console.log(result);\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    dispatch(\n      sort({\n        droppableIdStart: source.droppableId,\n        droppableIdEnd: destination.droppableId,\n        droppableIndexStart: source.index,\n        droppableIndexEnd: destination.index,\n        draggableId: draggableId,\n        type: type,\n      })\n    );\n  };\n\n  const handleCreateList = () => {\n    dispatch(addList(\"Some title\"));\n  };\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleOnDragEnd}>\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n          {(provided) => (\n            <div\n              className=\"lists-container\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {board?.lists.map((listId, index) => {\n                const list = lists.find((item) => item.id === listId);\n                if (list) {\n                  const listCards = list.cards.map((cardId) => cards[cardId]);\n\n                  return (\n                    <List\n                      listId={list.id}\n                      key={list.id}\n                      title={list.title}\n                      cards={listCards}\n                      index={index}\n                    />\n                  );\n                }\n              })}\n              {provided.placeholder}\n              <CreateList handleCreateList={handleCreateList} />\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n\n    // <div className=\"board-container\">\n    //   <div className=\"board-container__header\">{title}</div>\n    //   <div className=\"board-container__canvas\">\n    // <DragDropContext onDragEnd={handleOnDragEnd}>\n    //   <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n    //     {(provided) => (\n    //       <div\n    //         className=\"lists-container\"\n    //         {...provided.droppableProps}\n    //         ref={provided.innerRef}\n    //       >\n    //         {board?.lists.map((listId, index) => {\n    //           const list = lists[listId];\n    //           if (list) {\n    //             const listCards = list.cards.map((cardId) => cards[cardId]);\n\n    //             return (\n    //               <List\n    //                 listId={list.id}\n    //                 key={list.id}\n    //                 title={list.title}\n    //                 cards={listCards}\n    //                 index={index}\n    //               />\n    //             );\n    //           }\n    //         })}\n    //         {provided.placeholder}\n    //         <button onClick={handleCreateList}>Create List</button>\n    //       </div>\n    //     )}\n    //   </Droppable>\n    // </DragDropContext>\n    //   </div>\n    // </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/boardActions.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/cardActions.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/redux/actions/listActions.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateList/index.jsx",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/index.jsx",["139","140"],"import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { createCard } from \"../../redux/actions/cardActions\";\nimport { deleteList } from \"../../redux/actions/listActions\";\nimport CreateCard from \"../CreateCard\";\nimport ListHeader from \"./ListHeader\";\nimport Card from \"../Card\";\nimport \"./styles.scss\";\n\nexport default function List(props) {\n  const [creatingCard, setCreatingCard] = useState(false);\n  const dispatch = useDispatch();\n  const { listId, index, title, cards } = props;\n\n  const handleCreating = () => {\n    setCreatingCard(!creatingCard);\n  };\n  const handleCreateCard = (title) => {\n    dispatch(createCard({ listId, title: title }));\n  };\n\n  const handleDeleteList = () => {\n    dispatch(deleteList(listId));\n  };\n\n  return (\n    <Draggable key={listId} draggableId={String(listId)} index={index}>\n      {(provided) => (\n        <div\n          className=\"list-container\"\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <div className=\"list-container__content\">\n            <div className=\"list-container__content__header\">\n              <ListHeader title={title} listId={listId} />\n            </div>\n            <div className=\"list-container__content__cards\">\n              <Droppable droppableId={String(listId)} type=\"card\">\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>\n                    {cards?.map((card, index) => {\n                      return (\n                        <Card\n                          key={card.id}\n                          index={index}\n                          id={card.id}\n                          title={card.title}\n                          listId={listId}\n                        />\n                      );\n                    })}\n                    {provided.placeholder}\n                    <CreateCard\n                      handleCreating={handleCreating}\n                      handleCreateCard={handleCreateCard}\n                      creatingCard={creatingCard}\n                    />\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/List/ListHeader.jsx",["141"],"import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { editListTitle } from \"../../redux/actions/listActions\";\n\nexport default function ListHeader(props) {\n  const dispatch = useDispatch();\n  const [headerTitle, setHeaderTitle] = useState(\"\");\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { title, listId } = props;\n\n  useEffect(() => {\n    setHeaderTitle(title);\n  }, []);\n\n  const handleEnableEdit = () => {\n    setHeaderTitle(title);\n    setIsEditing(true);\n  };\n\n  const handleTitleChange = (e) => {\n    setHeaderTitle(e.target.value);\n    if (e.target.value) {\n      dispatch(editListTitle({ newTitle: e.target.value, listId }));\n    }\n  };\n\n  return (\n    <>\n      {isEditing ? (\n        <form\n          onSubmit={() => setIsEditing(false)}\n          onBlur={() => setIsEditing(false)}\n        >\n          <input\n            type=\"text\"\n            value={headerTitle}\n            onChange={(e) => handleTitleChange(e)}\n            autoFocus\n          />\n        </form>\n      ) : (\n        <div onClick={() => handleEnableEdit()}>{title}</div>\n      )}\n    </>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/Card/index.jsx",["142"],"import { Draggable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\nimport \"./styles.scss\";\n\nexport default function Card(props) {\n  const dispatch = useDispatch();\n\n  const { index, id, title } = props;\n  return (\n    <Draggable draggableId={String(id)} index={index}>\n      {(provided) => (\n        <>\n          <div\n            className=\"card-container\"\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            // onDoubleClick={() => setIsEditing(true)}\n          >\n            <div className=\"card-container__content\">{title}</div>\n          </div>\n        </>\n      )}\n    </Draggable>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/components/CreateCard/index.jsx",["143"],"import { useState } from \"react\";\nimport \"./styles.scss\";\n\nexport default function CreateCard(props) {\n  const [cardTitle, setCardTitle] = useState(\"\");\n  const { handleCreateCard, creatingCard, handleCreating } = props;\n  return (\n    <div className=\"create-card\">\n      {creatingCard ? (\n        <div>\n          <input\n            type=\"text\"\n            onChange={(e) => setCardTitle(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                handleCreateCard(cardTitle);\n                handleCreating();\n              }\n            }}\n            autoFocus\n          />\n          <button\n            onClick={() => {\n              handleCreating();\n            }}\n          >\n            Cancel\n          </button>\n          <button\n            onClick={() => {\n              handleCreateCard(cardTitle);\n              handleCreating();\n            }}\n          >\n            Create\n          </button>\n        </div>\n      ) : (\n        <a onClick={handleCreating}>+ Add another card</a>\n      )}\n    </div>\n  );\n}\n","/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignIn/index.jsx",["144"],"/Users/michaelparkadze/Repos/react-trello-clone/src/views/SignUp/index.jsx",["145","146"],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/index.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/auth.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/db.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/user.js",[],"/Users/michaelparkadze/Repos/react-trello-clone/src/firebase/firebase.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":11},{"ruleId":"155","severity":1,"message":"156","line":20,"column":1,"nodeType":"157","endLine":122,"endColumn":3},{"ruleId":"151","severity":1,"message":"158","line":6,"column":3,"nodeType":"153","messageId":"154","endLine":6,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":21,"column":1,"nodeType":"157","endLine":83,"endColumn":3},{"ruleId":"155","severity":1,"message":"156","line":11,"column":1,"nodeType":"157","endLine":40,"endColumn":3},{"ruleId":"151","severity":1,"message":"152","line":5,"column":8,"nodeType":"153","messageId":"154","endLine":5,"endColumn":11},{"ruleId":"151","severity":1,"message":"159","line":1,"column":10,"nodeType":"153","messageId":"154","endLine":1,"endColumn":14},{"ruleId":"151","severity":1,"message":"160","line":6,"column":10,"nodeType":"153","messageId":"154","endLine":6,"endColumn":20},{"ruleId":"151","severity":1,"message":"161","line":7,"column":38,"nodeType":"153","messageId":"154","endLine":7,"endColumn":47},{"ruleId":"151","severity":1,"message":"152","line":10,"column":8,"nodeType":"153","messageId":"154","endLine":10,"endColumn":11},{"ruleId":"151","severity":1,"message":"162","line":21,"column":15,"nodeType":"153","messageId":"154","endLine":21,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":26,"column":6,"nodeType":"165","endLine":26,"endColumn":8,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":62,"column":49,"nodeType":"169","messageId":"170","endLine":62,"endColumn":51},{"ruleId":"151","severity":1,"message":"171","line":1,"column":20,"nodeType":"153","messageId":"154","endLine":1,"endColumn":29},{"ruleId":"151","severity":1,"message":"172","line":23,"column":9,"nodeType":"153","messageId":"154","endLine":23,"endColumn":25},{"ruleId":"163","severity":1,"message":"173","line":14,"column":6,"nodeType":"165","endLine":14,"endColumn":8,"suggestions":"174"},{"ruleId":"151","severity":1,"message":"175","line":6,"column":9,"nodeType":"153","messageId":"154","endLine":6,"endColumn":17},{"ruleId":"176","severity":1,"message":"177","line":39,"column":9,"nodeType":"178","endLine":39,"endColumn":37},{"ruleId":"151","severity":1,"message":"179","line":4,"column":31,"nodeType":"153","messageId":"154","endLine":4,"endColumn":39},{"ruleId":"151","severity":1,"message":"179","line":4,"column":31,"nodeType":"153","messageId":"154","endLine":4,"endColumn":39},{"ruleId":"151","severity":1,"message":"180","line":4,"column":41,"nodeType":"153","messageId":"154","endLine":4,"endColumn":45},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'DELETE_BOARD' is defined but never used.","'Link' is defined but never used.","'createCard' is defined but never used.","'Draggable' is defined but never used.","'title' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'boards', 'dispatch', and 'id'. Either include them or remove the dependency array.","ArrayExpression",["183"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'handleDeleteList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["184"],"'dispatch' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Checkbox' is defined but never used.","'Icon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [boards, dispatch, id]",{"range":"189","text":"190"},"Update the dependencies array to be: [title]",{"range":"191","text":"192"},[1059,1061],"[boards, dispatch, id]",[428,430],"[title]"]